{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "2FinalProject_schoi64_rachary6.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Irpg77zitxd9",
        "colab_type": "text"
      },
      "source": [
        "##Predicting the impending onset of septic shock in patients with sepsis\n",
        "\n",
        "####SeYeon Cindy Choi (schoi64) and Rupsa Acharya (rachary6)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p6cABJWExb8Z",
        "colab_type": "text"
      },
      "source": [
        "####Part B"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hctVX3iItNYp",
        "colab_type": "code",
        "outputId": "cf4845a0-202f-4904-896f-b0f45e28b54c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        }
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import random as rnd\n",
        "import matplotlib.pyplot as plt\n",
        "import sklearn as skl\n",
        "import sklearn.linear_model as lm\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn import model_selection, metrics\n",
        "import statsmodels as sm\n",
        "import statsmodels.formula.api as smf\n",
        "import statsmodels.api as smi\n",
        "import datetime\n",
        "\n",
        "%matplotlib inline\n",
        "sns.set()\n",
        "\n",
        "# inline plots\n",
        "%matplotlib inline\n",
        "\n",
        "# mount GDrive\n",
        "from google.colab import drive\n",
        "drive.mount('gdrive/')\n",
        "\n",
        "#import data sets \n",
        "trainData=pd.read_csv('gdrive/My Drive/dslabfinal/TrainingData.csv',index_col=0)\n",
        "testData=pd.read_csv('gdrive/My Drive/dslabfinal/TestingData.csv')\n",
        "onsetTimes=pd.read_csv('gdrive/My Drive/dslabfinal/TestingOnsetTimes.csv')\n",
        "timeStamps=pd.read_csv('gdrive/My Drive/dslabfinal/TestingTimestamps.csv')\n",
        "\n",
        "#print(trainData.shape)\n",
        "#print(testData.shape)\n",
        "#print(onsetTimes.shape)\n",
        "#print(timeStamps.shape)\n",
        "\n",
        "trainData.head(5)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at gdrive/; to attempt to forcibly remount, call drive.mount(\"gdrive/\", force_remount=True).\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/arraysetops.py:569: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
            "  mask |= (ar1 == a)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x.hr</th>\n",
              "      <th>x.sbp</th>\n",
              "      <th>x.dbp</th>\n",
              "      <th>x.mbp</th>\n",
              "      <th>x.resp</th>\n",
              "      <th>x.temp</th>\n",
              "      <th>x.cvp</th>\n",
              "      <th>x.pao2</th>\n",
              "      <th>x.fio2</th>\n",
              "      <th>x.gcs</th>\n",
              "      <th>x.bili</th>\n",
              "      <th>x.platelets</th>\n",
              "      <th>x.creat</th>\n",
              "      <th>x.lactate</th>\n",
              "      <th>x.bun</th>\n",
              "      <th>x.ph</th>\n",
              "      <th>x.wbc</th>\n",
              "      <th>x.paco2</th>\n",
              "      <th>x.hgb</th>\n",
              "      <th>x.hct</th>\n",
              "      <th>x.potassium</th>\n",
              "      <th>x.urine</th>\n",
              "      <th>x.resp.sofa</th>\n",
              "      <th>x.nervous.sofa</th>\n",
              "      <th>x.cardio.sofa</th>\n",
              "      <th>x.liver.sofa</th>\n",
              "      <th>x.coag.sofa</th>\n",
              "      <th>x.kidney.sofa</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>87.252031</td>\n",
              "      <td>119.411786</td>\n",
              "      <td>61.039926</td>\n",
              "      <td>77.835458</td>\n",
              "      <td>20.242346</td>\n",
              "      <td>37.164892</td>\n",
              "      <td>15.309346</td>\n",
              "      <td>346.0</td>\n",
              "      <td>24.447134</td>\n",
              "      <td>9.268035</td>\n",
              "      <td>10.335779</td>\n",
              "      <td>232.129378</td>\n",
              "      <td>6.065923</td>\n",
              "      <td>1.893525</td>\n",
              "      <td>35.051098</td>\n",
              "      <td>7.49</td>\n",
              "      <td>13.000894</td>\n",
              "      <td>28.5</td>\n",
              "      <td>10.931866</td>\n",
              "      <td>30.624509</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>87.252031</td>\n",
              "      <td>119.411786</td>\n",
              "      <td>61.039926</td>\n",
              "      <td>77.835458</td>\n",
              "      <td>20.242346</td>\n",
              "      <td>37.164892</td>\n",
              "      <td>15.309346</td>\n",
              "      <td>346.0</td>\n",
              "      <td>24.447134</td>\n",
              "      <td>9.268035</td>\n",
              "      <td>10.335779</td>\n",
              "      <td>232.129378</td>\n",
              "      <td>6.065923</td>\n",
              "      <td>1.893525</td>\n",
              "      <td>35.051098</td>\n",
              "      <td>7.49</td>\n",
              "      <td>13.000894</td>\n",
              "      <td>28.5</td>\n",
              "      <td>10.931866</td>\n",
              "      <td>30.624509</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>87.252031</td>\n",
              "      <td>119.411786</td>\n",
              "      <td>61.039926</td>\n",
              "      <td>77.835458</td>\n",
              "      <td>20.242346</td>\n",
              "      <td>37.164892</td>\n",
              "      <td>15.309346</td>\n",
              "      <td>346.0</td>\n",
              "      <td>24.447134</td>\n",
              "      <td>9.268035</td>\n",
              "      <td>10.335779</td>\n",
              "      <td>232.129378</td>\n",
              "      <td>6.065923</td>\n",
              "      <td>1.893525</td>\n",
              "      <td>35.051098</td>\n",
              "      <td>7.49</td>\n",
              "      <td>13.000894</td>\n",
              "      <td>28.5</td>\n",
              "      <td>10.931866</td>\n",
              "      <td>30.624509</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>87.252031</td>\n",
              "      <td>119.411786</td>\n",
              "      <td>61.039926</td>\n",
              "      <td>77.835458</td>\n",
              "      <td>20.242346</td>\n",
              "      <td>37.164892</td>\n",
              "      <td>15.309346</td>\n",
              "      <td>346.0</td>\n",
              "      <td>24.447134</td>\n",
              "      <td>9.268035</td>\n",
              "      <td>10.335779</td>\n",
              "      <td>232.129378</td>\n",
              "      <td>6.065923</td>\n",
              "      <td>1.893525</td>\n",
              "      <td>35.051098</td>\n",
              "      <td>7.49</td>\n",
              "      <td>13.000894</td>\n",
              "      <td>28.5</td>\n",
              "      <td>10.931866</td>\n",
              "      <td>30.624509</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>87.252031</td>\n",
              "      <td>119.411786</td>\n",
              "      <td>61.039926</td>\n",
              "      <td>77.835458</td>\n",
              "      <td>20.242346</td>\n",
              "      <td>37.164892</td>\n",
              "      <td>15.309346</td>\n",
              "      <td>346.0</td>\n",
              "      <td>24.447134</td>\n",
              "      <td>9.268035</td>\n",
              "      <td>10.335779</td>\n",
              "      <td>232.129378</td>\n",
              "      <td>6.065923</td>\n",
              "      <td>1.893525</td>\n",
              "      <td>35.051098</td>\n",
              "      <td>7.49</td>\n",
              "      <td>13.000894</td>\n",
              "      <td>28.5</td>\n",
              "      <td>10.931866</td>\n",
              "      <td>30.624509</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.10508</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        x.hr       x.sbp      x.dbp  ...  x.coag.sofa  x.kidney.sofa  y\n",
              "1  87.252031  119.411786  61.039926  ...            0              0  0\n",
              "2  87.252031  119.411786  61.039926  ...            0              0  0\n",
              "3  87.252031  119.411786  61.039926  ...            0              0  0\n",
              "4  87.252031  119.411786  61.039926  ...            0              0  0\n",
              "5  87.252031  119.411786  61.039926  ...            0              0  0\n",
              "\n",
              "[5 rows x 29 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QdNuwZ_kvq59",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#define & isolate the x and y values of data set \n",
        "x=trainData.drop('y',axis=1)\n",
        "y=trainData['y']\n",
        "y=pd.DataFrame(y)\n",
        "\n",
        "#x.head(5)\n",
        "#y.head(5)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QHbVDvGpwJ4H",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#normalisation of training set x values  \n",
        "xNorm=StandardScaler().fit_transform(x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dc7exUx8xjJA",
        "colab_type": "code",
        "outputId": "b95cf487-7427-4cab-86da-2161fe674cb9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "#taking a part of the data to train the model \n",
        "partFrac=0.5\n",
        "xNorm=np.array(xNorm)\n",
        "y=np.ravel(np.array(y))\n",
        "\n",
        "sample=np.random.uniform(size=1576200)<partFrac\n",
        "xPart=xNorm[sample,:]\n",
        "yPart=y[sample]\n",
        "N=np.shape(xPart)[0]\n",
        "\n",
        "#fit a logistic regression model to the initial training data set\n",
        "logReg=lm.SGDClassifier(loss='log',penalty='l1',learning_rate='optimal',l1_ratio=1,shuffle=True).fit(xPart,yPart)\n",
        "coeff=logReg.coef_\n",
        "np.shape(coeff)\n",
        "print(coeff)\n",
        "\n",
        "pred=logReg.predict(xPart)\n",
        "print(pred)\n",
        "\n",
        "accuracy=sum(yPart==pred)/N\n",
        "print(accuracy)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 3.87620566e-01 -2.33637665e+00  0.00000000e+00  3.59222698e-02\n",
            "   3.52598822e-01 -1.79486900e-02 -1.73498525e-02  1.18469131e-01\n",
            "   1.77468680e-01 -2.32610588e+00 -3.10070793e+01 -2.64495934e-01\n",
            "  -3.00798574e+01  9.52655650e-01 -1.57024513e+01 -1.14722476e+00\n",
            "   3.64426377e+00 -2.01196605e-01  0.00000000e+00  6.47172585e-02\n",
            "   0.00000000e+00 -7.00812546e-01  2.32233941e-01 -2.13485988e+00\n",
            "   1.29195850e+00  2.25600339e-01  0.00000000e+00  2.24908642e-01]]\n",
            "[0 0 1 ... 1 1 1]\n",
            "0.9058469420916865\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C7cdEuboBvF0",
        "colab_type": "code",
        "outputId": "e45beab8-ed96-4ce1-f3c6-895ce83062c0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "#now splitting entire data set into training and validation sets using kfold\n",
        "kf = KFold(n_splits=10, random_state=None, shuffle=True)\n",
        "kf.get_n_splits(x)\n",
        "\n",
        "#alpha: define range of potential lambdas \n",
        "alpha=(np.asarray(range(20))+.5)/10000.\n",
        "accArr=np.zeros((10,len(alpha)))\n",
        "\n",
        "row=0\n",
        "\n",
        "#access data based on the indices\n",
        "for i,j in kf.split(xNorm,y):\n",
        "  xTrain,xVal=xNorm[i],xNorm[j]\n",
        "  yTrain,yVal=y[i],y[j]\n",
        "  \n",
        "  col=0\n",
        "  print(row)\n",
        "  \n",
        "  #fit logistic regression model to each alpha value \n",
        "  for a in alpha:\n",
        "    logReg2=lm.SGDClassifier(loss='log',penalty='l1',alpha=a).fit(xTrain,yTrain)\n",
        "    pred2=logReg2.predict(xVal)\n",
        "    \n",
        "    #calculate accuracy of logistic regression fit \n",
        "    acc=sum(yVal==pred2)/len(yVal)\n",
        "    accArr[row,col]=acc\n",
        "    col=col+1\n",
        "  row=row+1"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BpZ0kk_MezKp",
        "colab_type": "code",
        "outputId": "6010362f-3bd7-4552-f451-149e873ee662",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        }
      },
      "source": [
        "print(accArr)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.89458191 0.90629362 0.90643954 0.90730872 0.90770841 0.90629996\n",
            "  0.90790509 0.90753077 0.90728968 0.90757518 0.90733409 0.90712473\n",
            "  0.90727065 0.90728968 0.90724527 0.90715011 0.90702322 0.90714376\n",
            "  0.90729603 0.9070486 ]\n",
            " [0.907277   0.90859662 0.90803832 0.9080637  0.9081779  0.90781627\n",
            "  0.90759421 0.90751808 0.90765131 0.90790509 0.90753077 0.9078924\n",
            "  0.9075498  0.90784164 0.9075498  0.90763228 0.90758153 0.90778455\n",
            "  0.9078924  0.90779089]\n",
            " [0.89841391 0.90624921 0.90780992 0.90645857 0.90740388 0.90694709\n",
            "  0.90753077 0.90733409 0.9074356  0.90721355 0.90752443 0.90730872\n",
            "  0.90698515 0.90704225 0.90714376 0.90666159 0.90686461 0.9064776\n",
            "  0.90678213 0.90673772]\n",
            " [0.88833904 0.90430148 0.90638878 0.90677579 0.90622383 0.90669966\n",
            "  0.90659815 0.90677579 0.90713742 0.90662987 0.90667428 0.90650933\n",
            "  0.90658546 0.90677579 0.90628093 0.90645223 0.9065347  0.9067631\n",
            "  0.90672503 0.90677579]\n",
            " [0.90593833 0.90459967 0.90676945 0.90734678 0.90732141 0.90739119\n",
            "  0.90701688 0.90661084 0.90702956 0.90748636 0.90694074 0.90700419\n",
            "  0.90673138 0.90687096 0.90694709 0.90698515 0.90657911 0.90689633\n",
            "  0.90669966 0.9064776 ]\n",
            " [0.88681005 0.90263926 0.90526583 0.90652201 0.90581779 0.9055196\n",
            "  0.9058622  0.90602715 0.90596371 0.90581145 0.90553229 0.90572897\n",
            "  0.90584317 0.90569725 0.90565918 0.90567187 0.90567821 0.90599543\n",
            "  0.90572262 0.90597005]\n",
            " [0.90694709 0.90439031 0.90751808 0.9079495  0.90827941 0.90793681\n",
            "  0.90739754 0.90753711 0.90761959 0.90753077 0.90756249 0.90805101\n",
            "  0.90758787 0.9077211  0.90763862 0.90737216 0.90730237 0.90751808\n",
            "  0.90763228 0.90736582]\n",
            " [0.90525948 0.90753077 0.90701053 0.90746733 0.90664256 0.90741023\n",
            "  0.90718183 0.90713742 0.90750539 0.90741657 0.90688999 0.90707398\n",
            "  0.90729603 0.90723893 0.90703591 0.90735947 0.90717549 0.90683923\n",
            "  0.90687096 0.90673772]\n",
            " [0.90517066 0.90678848 0.90780992 0.90815886 0.9088504  0.90871082\n",
            "  0.90813349 0.90860297 0.90862835 0.90869179 0.90865372 0.90871717\n",
            "  0.90825403 0.90819058 0.90836188 0.90841898 0.90837457 0.90845705\n",
            "  0.90860931 0.90832382]\n",
            " [0.85499302 0.9051897  0.90647126 0.90697247 0.90702956 0.90687096\n",
            "  0.90676945 0.90668062 0.90681386 0.90714376 0.9062048  0.90638244\n",
            "  0.90691537 0.90677579 0.90669331 0.90680117 0.90697881 0.90694074\n",
            "  0.90661718 0.90685827]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VBI58TOSIZgF",
        "colab_type": "text"
      },
      "source": [
        "####Part C"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WAQ0In1tDkjK",
        "colab_type": "code",
        "outputId": "2df9f0ab-5112-4010-e815-7559db25b68d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#extract most accurate lambda\n",
        "accMean=[]\n",
        "for i in range(len(alpha)):\n",
        "  accMean.append(np.mean(accArr[:,i]))\n",
        "  \n",
        "lambdaOptimal=alpha[accMean.index(max(accMean))]\n",
        "print('The optimal value of lambda is ', lambdaOptimal)\n",
        "\n",
        "#fitting full training set to optimised model with optimal lambda\n",
        "modelOP =lm.SGDClassifier(loss='log',penalty='l1',alpha=lambdaOptimal,l1_ratio=1,max_iter=50)\n",
        "logRegOp = modelOP.fit(xNorm,y)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The optimal value of lambda is  0.00045\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l42JaxFGUdFK",
        "colab_type": "text"
      },
      "source": [
        "####Part D"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nlsGo6WaUf2e",
        "colab_type": "code",
        "outputId": "5fbc5f86-85f8-421e-8033-68fa27c5fea9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "#ROC parameter estimations\n",
        "\n",
        "#prediction of the training set \n",
        "predOp=modelOP.predict_proba(xNorm)\n",
        "print(predOp)\n",
        "\n",
        "false,true,thres=skl.metrics.roc_curve(y,predOp[:,1])\n",
        "specificity=1-false\n",
        "roc_auc=skl.metrics.auc(false,true)\n",
        "\n",
        "#print(len(false))\n",
        "#print(len(thres))\n",
        "\n",
        "#compute threshold by calculating distance from top left \n",
        "dist=np.sqrt(np.power(false,2)+np.power((1-true),2))\n",
        "#minimise the distance \n",
        "indThres=np.argmin(dist)\n",
        "#extract the appropriate threshold for each calculated distance \n",
        "threshold=thres[indThres]\n",
        "\n",
        "print(thres)\n",
        "print(threshold)\n",
        "print(false[indThres])\n",
        "print(true[indThres])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.82885135 0.17114865]\n",
            " [0.82885135 0.17114865]\n",
            " [0.82885135 0.17114865]\n",
            " ...\n",
            " [0.30692581 0.69307419]\n",
            " [0.30692581 0.69307419]\n",
            " [0.30692581 0.69307419]]\n",
            "[2.00000000e+00 1.00000000e+00 1.00000000e+00 ... 6.07310833e-32\n",
            " 5.43742944e-32 0.00000000e+00]\n",
            "0.17502101077936463\n",
            "0.12952876795622104\n",
            "0.8640230326295586\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TqKRo12JXVUN",
        "colab_type": "code",
        "outputId": "24a322cf-cf3d-439e-a23a-5d03f9a90cea",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        }
      },
      "source": [
        "#plotting the roc curve of the training set \n",
        "plt.figure()\n",
        "roc,=plt.plot(false,true,'r',label='AUC=%.3f'%roc_auc)\n",
        "plt.plot([0,1],[0,1],'b--')\n",
        "plt.title('Receiver Operating Characteristics (ROC)')\n",
        "plt.xlim([0,1])\n",
        "plt.xlabel('False positive rate')\n",
        "plt.ylim([0,1])\n",
        "plt.ylabel('True positive rate')\n",
        "ptOp=plt.scatter(false[indThres],true[indThres],c='k')\n",
        "plt.legend([ptOp,roc],['Operating point','AUC=%.3f'%roc_auc])\n",
        "\n",
        "#calculating accuracy based on optimal lambda & threshold \n",
        "Ntot=np.shape(xNorm)[0]\n",
        "accuracy=sum((predOp[:,1]>threshold).astype(int)==y)/Ntot\n",
        "print('The accuracy is %.3f'%accuracy)\n",
        "print('The number of predictions over the threshold is %.f' %(accuracy*Ntot))\n",
        "print('The total number of predictions are %.f' %sum(y))\n",
        "print('The operating point is at ', [false[indThres],true[indThres]])\n",
        "print('The specificity is %.3f' %(1-false[indThres]))\n",
        "print('The sensitivity is %.3f' %true[indThres])\n",
        "print('The PPV is %.3f' %(true[indThres]/(false[indThres]+true[indThres])))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The accuracy is 0.869\n",
            "The number of predictions over the threshold is 1370347\n",
            "The total number of predictions are 260500\n",
            "The operating point is at  [0.12952876795622104, 0.8640230326295586]\n",
            "The specificity is 0.870\n",
            "The sensitivity is 0.864\n",
            "The PPV is 0.870\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L7W9ZUT2A41b",
        "colab_type": "code",
        "outputId": "d5b56965-fbc5-4945-db52-d80c69fdcbb0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        }
      },
      "source": [
        "#prediction of the test set \n",
        "xTest=testData.drop(['Unnamed: 0','patient','y'],axis=1)\n",
        "xTestNorm=StandardScaler().fit_transform(xTest)\n",
        "yTest=testData['y']\n",
        "\n",
        "predTest=modelOP.predict_proba(xTestNorm)\n",
        "print(predTest)\n",
        "\n",
        "fTest,tTest,thrTest=skl.metrics.roc_curve(yTest,predTest[:,1])\n",
        "specTest=1-fTest\n",
        "roc_aucTest=skl.metrics.auc(fTest,tTest)\n",
        "\n",
        "print(len(fTest))\n",
        "print(len(tTest))\n",
        "\n",
        "#compute threshold by calculating distance from top left \n",
        "distTest=np.sqrt(np.power(fTest,2)+np.power((1-tTest),2))\n",
        "#minimise the distance \n",
        "iThresTest=np.argmin(distTest)\n",
        "#extract the appropriate threshold for each calculated distance \n",
        "thresholdTest=thrTest[iThresTest]\n",
        "\n",
        "print(thrTest)\n",
        "print(thresholdTest)\n",
        "print(fTest[iThresTest])\n",
        "print(tTest[iThresTest])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.62859105 0.37140895]\n",
            " [0.43407029 0.56592971]\n",
            " [0.17901861 0.82098139]\n",
            " ...\n",
            " [0.47078345 0.52921655]\n",
            " [0.4540278  0.5459722 ]\n",
            " [0.48845337 0.51154663]]\n",
            "412228\n",
            "412228\n",
            "[2.00000000e+00 1.00000000e+00 9.99999974e-01 ... 1.43558222e-32\n",
            " 2.22956355e-42 0.00000000e+00]\n",
            "0.13080551929879572\n",
            "0.32404017932382784\n",
            "0.5796383688568515\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pd1-3IcZGBA7",
        "colab_type": "code",
        "outputId": "64d17bdd-2af8-4f2e-bea4-db45a804e044",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        }
      },
      "source": [
        "#plotting the roc curve of the testing set \n",
        "plt.figure()\n",
        "rocTest,=plt.plot(fTest,tTest,'r',label='AUC=%.3f'%roc_aucTest)\n",
        "plt.plot([0,1],[0,1],'b--')\n",
        "plt.title('Receiver Operating Characteristics (ROC)')\n",
        "plt.xlim([0,1])\n",
        "plt.xlabel('False positive rate')\n",
        "plt.ylim([0,1])\n",
        "plt.ylabel('True positive rate')\n",
        "ptOpTest=plt.scatter(fTest[iThresTest],tTest[iThresTest],c='k')\n",
        "plt.legend([ptOpTest,rocTest],['Operating point','AUC=%.3f'%roc_auc])\n",
        "\n",
        "#calculating accuracy based on optimal lambda & testing threshold \n",
        "NtotTest=np.shape(xTestNorm)[0]\n",
        "accuracyTest=sum((predTest[:,1]>thresholdTest).astype(int)==yTest)/NtotTest\n",
        "print('The accuracy is %.3f'%accuracyTest)\n",
        "print('The number of predictions over the threshold is %.f' %(accuracyTest*NtotTest))\n",
        "print('The total number of predictions are %.f' %sum(yTest))\n",
        "print('The operating point is at ', [fTest[iThresTest],tTest[iThresTest]])\n",
        "print('The specificity is %.3f' %(1-fTest[iThresTest]))\n",
        "print('The sensitivity is %.3f' %tTest[iThresTest])\n",
        "print('The PPV is %.3f' %(tTest[iThresTest]/(fTest[iThresTest]+tTest[iThresTest])))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The accuracy is 0.667\n",
            "The number of predictions over the threshold is 869210\n",
            "The total number of predictions are 115698\n",
            "The operating point is at  [0.32404017932382784, 0.5796383688568515]\n",
            "The specificity is 0.676\n",
            "The sensitivity is 0.580\n",
            "The PPV is 0.641\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EbDCahV2fsQX",
        "colab_type": "text"
      },
      "source": [
        "####Part E"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "koWAkfQ2fr8k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Redefine test data, time stamps, and onset times for purpose of part E\n",
        "patient=np.unique(testData.patient[testData['y']==1])\n",
        "#print(len(patient))\n",
        "\n",
        "#ipred: index of predictions\n",
        "#pat: list of patients\n",
        "\n",
        "ipred=[]\n",
        "pat=[]\n",
        "\n",
        "for p in patient:\n",
        "  #access frame of data of each septic shock patient\n",
        "  frame=testData[testData.patient==p]\n",
        "  change=False\n",
        "  start=(frame.iloc[0]['Unnamed: 0']).astype(int)-1\n",
        "  \n",
        "  #detect index where patient state prediction changes from 0 to 1\n",
        "  for i in range(5,frame.shape[0]-5):\n",
        "    ind=start+i\n",
        "    pt1=sum((predTest[(ind-5):(ind-1),1]>thresholdTest).astype(int))\n",
        "    pt2=sum((predTest[ind:(ind+4),1]>thresholdTest).astype(int))\n",
        "    if (pt1<2 and pt2>3 and change==False):\n",
        "      ipred.append(ind)\n",
        "      pat.append(p)\n",
        "      change=True\n",
        "      \n",
        "#print(ipred)\n",
        "#print(pat)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h8pXlXsZKrLI",
        "colab_type": "code",
        "outputId": "8ba4c214-e894-4df5-8562-46e76cae0f06",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        }
      },
      "source": [
        "onsetTimes['patient']=patient\n",
        "\n",
        "tChange=[]\n",
        "\n",
        "#calculate difference between predicted time and actual onset time \n",
        "for i in range(len(pat)):\n",
        "  tShock=onsetTimes.loc[onsetTimes['patient']==pat[i],'x'].iloc[0]\n",
        "  tPred=timeStamps.iloc[ipred[i]]['x']\n",
        "  dtShock=datetime.datetime.strptime(tShock,'%Y-%m-%d %H:%M:%S')\n",
        "  dtPred=datetime.datetime.strptime(tPred,'%Y-%m-%d %H:%M:%S')\n",
        "  \n",
        "  #convert change in units of hours \n",
        "  change=(dtShock-dtPred).total_seconds()/60./60.\n",
        "  tChange.append(change)\n",
        "\n",
        "#calculate median difference between predicted and actual onset time\n",
        "med=np.median(np.asarray(tChange))\n",
        "print(med)\n",
        "\n",
        "plt.figure()\n",
        "n,bins,patches=plt.hist(tChange,10,range=[0,50],color='r')\n",
        "plt.axvline(med,color='k',label='Median EWT')\n",
        "plt.title('Early Warning Time (EWT) Histogram')\n",
        "plt.xlabel('# hours prior to onset')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "20.116666666666667\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f2f8116f208>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WhEUlq_nW1XU",
        "colab_type": "text"
      },
      "source": [
        "####Part G (extra credit)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ffTWpUYUW3pj",
        "colab_type": "code",
        "outputId": "b3e7b2ff-c4b0-455a-8570-97039194d5a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        }
      },
      "source": [
        "alpha2=(np.asarray(range(20))+.5)/10000.\n",
        "accArr2=np.zeros((10,len(alpha2)))\n",
        "\n",
        "row=0\n",
        "\n",
        "for i,j in kf.split(xNorm,y):\n",
        "  xTrain,xVal=xNorm[i],xNorm[j]\n",
        "  yTrain,yVal=y[i],y[j]\n",
        "  \n",
        "  col=0\n",
        "  print(row)\n",
        "  for a in alpha2:\n",
        "    logReg2=lm.SGDClassifier(loss='log',penalty='l1',alpha=a,class_weight='balanced').fit(xTrain,yTrain)\n",
        "    pred2=logReg2.predict(xVal)\n",
        "    \n",
        "    acc=sum(yVal==pred2)/len(yVal)\n",
        "    accArr2[row,col]=acc\n",
        "    col=col+1\n",
        "  row=row+1"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-GwtpuwxYiAq",
        "colab_type": "code",
        "outputId": "80bbfa15-1917-40b1-dc4f-ef0c18255298",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "accMean2=[]\n",
        "for i in range(len(alpha2)):\n",
        "  accMean2.append(np.mean(accArr2[:,i]))\n",
        "  \n",
        "lambdaOpBal=alpha2[accMean2.index(max(accMean2))]\n",
        "print('The optimal value of lambda is ', lambdaOpBal)\n",
        "\n",
        "modelOPBal=lm.SGDClassifier(loss='log',penalty='l1',alpha=lambdaOpBal,l1_ratio=1,max_iter=50,class_weight='balanced')\n",
        "logRegOpBal=modelOPBal.fit(xNorm,y)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The optimal value of lambda is  0.00025\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "udOPcQweYYwr",
        "colab_type": "code",
        "outputId": "47208363-3e9d-4d37-de8e-437dd9e01683",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        }
      },
      "source": [
        "predOpBal=modelOPBal.predict_proba(xNorm)\n",
        "\n",
        "fBal,tBal,thrBal=skl.metrics.roc_curve(y,predOpBal[:,1])\n",
        "specBal=1-fBal\n",
        "roc_aucBal=skl.metrics.auc(fBal,tBal)\n",
        "\n",
        "distBal=np.sqrt(np.power(fBal,2)+np.power((1-tBal),2))\n",
        "indThresBal=np.argmin(distBal)\n",
        "thresholdBal=thrBal[indThresBal]\n",
        "\n",
        "plt.figure()\n",
        "rocBal,=plt.plot(fBal,tBal,'r',label='AUC=%.3f'%roc_aucBal)\n",
        "plt.plot([0,1],[0,1],'b--')\n",
        "plt.title('Receiver Operating Characteristics (ROC)')\n",
        "plt.xlim([0,1])\n",
        "plt.xlabel('False positive rate')\n",
        "plt.ylim([0,1])\n",
        "plt.ylabel('True positive rate')\n",
        "ptOpBal=plt.scatter(fBal[indThresBal],tBal[indThresBal],c='k')\n",
        "plt.legend([ptOpBal,rocBal],['Operating point','AUC=%.3f'%roc_aucBal])\n",
        "\n",
        "NtotBal=np.shape(xNorm)[0]\n",
        "accuracyBal=sum((predOpBal[:,1]>thresholdBal).astype(int)==y)/NtotBal\n",
        "print('The accuracy is %.3f'%accuracyBal)\n",
        "print('The number of predictions over the threshold is %.f' %(accuracyBal*NtotBal))\n",
        "print('The total number of predictions are %.f' %sum(y))\n",
        "print('The operating point is at ', [fBal[indThresBal],tBal[indThresBal]])\n",
        "print('The specificity is %.3f' %(1-fBal[indThresBal]))\n",
        "print('The sensitivity is %.3f' %tBal[indThresBal])\n",
        "print('The PPV is %.3f' %(tBal[indThresBal]/(fBal[indThresBal]+tBal[indThresBal])))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The accuracy is 0.881\n",
            "The number of predictions over the threshold is 1388399\n",
            "The total number of predictions are 260500\n",
            "The operating point is at  [0.11626890628562742, 0.8664491362763915]\n",
            "The specificity is 0.884\n",
            "The sensitivity is 0.866\n",
            "The PPV is 0.882\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n9L8AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "02PXm103eoCl",
        "colab_type": "code",
        "outputId": "ec51e876-44a5-4e32-ae86-19ad5dbee7ad",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        }
      },
      "source": [
        "predTestBal=modelOPBal.predict_proba(xTestNorm)\n",
        "\n",
        "fTestBal,tTestBal,thrTestBal=skl.metrics.roc_curve(yTest,predTestBal[:,1])\n",
        "specTestBal=1-fTestBal\n",
        "roc_aucTestBal=skl.metrics.auc(fTestBal,tTestBal)\n",
        "\n",
        "distTestBal=np.sqrt(np.power(fTestBal,2)+np.power((1-tTestBal),2))\n",
        "iThresTestBal=np.argmin(distTestBal)\n",
        "thresholdTestBal=thrTestBal[iThresTestBal]\n",
        "\n",
        "plt.figure()\n",
        "rocTestBal,=plt.plot(fTestBal,tTestBal,'r',label='AUC=%.3f'%roc_aucTestBal)\n",
        "plt.plot([0,1],[0,1],'b--')\n",
        "plt.title('Receiver Operating Characteristics (ROC)')\n",
        "plt.xlim([0,1])\n",
        "plt.xlabel('False positive rate')\n",
        "plt.ylim([0,1])\n",
        "plt.ylabel('True positive rate')\n",
        "ptOpTestBal=plt.scatter(fTestBal[iThresTestBal],tTestBal[iThresTestBal],c='k')\n",
        "plt.legend([ptOpTestBal,rocTestBal],['Operating point','AUC=%.3f'%roc_aucBal])\n",
        "\n",
        "NtotTestBal=np.shape(xTestNorm)[0]\n",
        "accuracyTestBal=sum((predTestBal[:,1]>thresholdTestBal).astype(int)==yTest)/NtotTestBal\n",
        "print('The accuracy is %.3f'%accuracyTestBal)\n",
        "print('The number of predictions over the threshold is %.f' %(accuracyTestBal*NtotTestBal))\n",
        "print('The total number of predictions are %.f' %sum(yTest))\n",
        "print('The operating point is at ', [fTestBal[iThresTestBal],tTestBal[iThresTestBal]])\n",
        "print('The specificity is %.3f' %(1-fTestBal[iThresTestBal]))\n",
        "print('The sensitivity is %.3f' %tTestBal[iThresTestBal])\n",
        "print('The PPV is %.3f' %(tTestBal[iThresTestBal]/(fTestBal[iThresTestBal]+tTestBal[iThresTestBal])))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The accuracy is 0.664\n",
            "The number of predictions over the threshold is 864926\n",
            "The total number of predictions are 115698\n",
            "The operating point is at  [0.32817018909899887, 0.5849885045549621]\n",
            "The specificity is 0.672\n",
            "The sensitivity is 0.585\n",
            "The PPV is 0.641\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZEAAAEcCAYAAAAGD4lRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3Xd4VGX68PHvTDLplSSk0aQ99Bqa\n9CJVBOwoKtjWtWNZ3V376v58d+3YWBsIoqKIjd4EQu9KyUMJnSSkZ9IzM+f945xAwJQBMpmU53Nd\nXCQnp9xzMpn7POXcx6RpGoqiKIpyOczuDkBRFEWpu1QSURRFUS6bSiKKoijKZVNJRFEURblsKoko\niqIol00lEUVRFOWyqSTSwAghbhdCLHd3HLWJECJXCNHSDcdtIYTQhBCeNX1sVxBC7BNCDLmM7ar9\nPSmE8BZC7BdCRFfnfp047ptCiL/W5DHdzaTuE3EfIcQxIBKwA7nAUuBhKWWuG8OqVkKIq4FXgV6A\nA1gHPCOl3O+meH4D5kopP62h47UFXgOGAhbgODALeBdoChwFLFJKW03EUxEhhAa0kVIedvFxWlAD\nr1kI8QjQUUr5gPH9LOA2oNj4twN4REqZUGabJsD/A0YDPsA+4BUp5a9l1jEBjwD3A1cBmcAmY70/\njKS1FWglpSx21eurTVRLxP3GSykDgG5Ad+Dvbo7nspR3NS2E6AcsB34CYtD/6PYAG1xx5V/bruiF\nEK2ALcBJoLOUMhi4CYgDAqv5WG577bXtvBseAOZctOw/xt9aLHAa+Kz0B0KIRkA8eoLpCIQDbwPz\nhBA3ltnHu8BjwKNAI6At8CMwDkBKmQQkANdV/0uqnWrjL79BklImCyGWoScTQG+So1/F3gx4AwuB\n6VLKAuPnE4CXgZZAKvCQlHKpECIYeAsYi371/wXwopTSLoSYCtwrpRwghPgIyJNSPlXmmD8Ba6WU\nbwkhYoAZwCD0ltLbUsr3jPVeAjoBheh/ME8AF1/d/wf4Ukr5bpllzwkhegIvAXca3R9zgQ+NfeQC\n/5RSflXVOSiz7QxgOrBCCPEo+odHH/T39wbgASnlKSHEa8BAoK8Q4h1glpTy4bJX4cYVax7Qwnjd\n+4HbpJRHjHhGGseLAr5C/8CZU0HL5mVgo5TyidIFUkqJfkWMECLEWHy7EOJfgJ9xjl8zft4b/UOr\nPVAALACeKL3CNeJ+GHjceK1XCSHeBa4HgoFDwONSyvXG+h7AM8A9QGPgIDDReB0Ae4x93iOl/FYI\ncS16K7KFcR4ekFL+buzrGPARcLv+rfAHDqO/t1YasX+I/iFbAHxlnId1xrGyhBAA1wDC2G6Ase+O\nwDtAT6AEeFdK+e9K9nkBIUQz9L+JLeX8TjDeO/OB78osno7+3rtHSukwln1t7OtNIcQCoDXwENBP\nSrm1zLZfcaHf0JPK9+Udv75RLZFawmhKj0H/Qyz1OvofTDf0N3As8IKxfm/gS+BpIAT9A++Ysd0s\nwGZs0x0YCdxbzmG/Bm4xmugIIUKNdb8RQpiBX9BbDrHAcOBxIcSoMttPQP9DCeGiPyQhhB9wNRf+\noZaaj/7hUSoK/covFrgL+J8wPmEqOwdltm0ENEfvYjCjJ83mQDP0D5v3AaSU/wTWo3cZBkgpHy4n\nNoBb0RNAKPrvo/RDPdx4vX8HwgBpvMaKjMC5D5IB6B+kw4EXhBDtjeV29A+3cKCf8fMHL9p2InrC\n7GB8vw39XDUC5gHfCSF8jJ89AUxGv7gIAu4G8qWUg4yfdzXOy7dCiO7A58BfjNc6E/jZSOqlJqN/\nWIaU0zX1LvqHfxDQCv13Dvr7FGObACnlprIbCSECgZXoXbsx6L/zVVXs82KdgcSKusuMhDeZC//W\nrgEWlEkgpeajv4/aop//UxclkPIcALpWsU69oVoi7vejcfUXAKwGXoRzfa/3A12klBnGsn+jfzD8\nHf1q8nMp5QpjP6eNdSLRPyRCjBZLnhDibWNfMy869npAQ786XwfcCGySUp4RQvQBIqSUrxjrJgoh\nPkH/gF1mLNskpfzR+Lrgon03Qv9ATyrnNSehfzCW9byUsghYK4RYBNwshHi1inMAekvrRWPb0jgW\nlO7UaH2sKSeGyiws/aAQQnyF3qoD/bzuk1L+YPzsPeCp8ncB6B++5b3+i71s/K72CCH2oH8AHZBS\n7iizzjEhxExgMPpVeqn/Kz03AFLKuWV+9qYQ4jn0BLUH/ULib0ZrCGNZRe4HZkopS6/mZwsh/gH0\nBdYay96TUp6sYPsSoLUQIlxKmQZsruRYZV0LJEsp3zS+L+R8i8LZfYYA1nKWPyWEeBg9gR5Hvwgq\nFU7F79XSnzv7+7QaMTQIKom430Sj+T8Y/cMxHMgCItC7N3acvyjHBHgYXzcFFpezv+boA7hJZbYz\no/fLX0BKqQkhvkG/KluH3s0yt8x+YoQQWWU28UBPPKUq+gABfcDRAUSj9xGXFQ2klV1XSplX5vvj\n6FehVZ0DgFQpZWHpN0YL6G30wdFQY3GgEMJDSmmvJN6ykst8nY+e4DFiOveajfN3qpL9pKO/1ss6\nnjEo/xb6GIof+t/rjou2veB3IIR4Cv0CIwb9AiGI8wm7KXDEiXhA//3fZQxQl/Iy9lvusS9yD/AK\nkCCEOIqeKH+tZP1SlcXo7D4zKX/M6Q0p5XNGF9VS9OT6u/GzNMr/XUWX+bmzv89A9L/hBkElkVpC\nSrnW6I9/A72LIg39qrqjlPJ0OZucRG/Sl7e8CAh3cvbL18ByIcTr6N0ik8rs56iUsk0l21Y4tU9K\nmSeE2IQ+kHxxS+BmzndRAIQKIfzLJJJmwF6qPgflxfAk+odDH2OcqRuwCz35VBqzE5KAJqXfGK3F\nJhWvzkrgBvTutcvxEXrsk6WUViHE4+itxbLOvR4hxEDgb+jdLvuklA4hRCbnX3vpe2avE8c+CbxW\nOj5Tgcp+/4eAyUa36PXA90KIsMq2KXPcWy9lnxddgICeGK4SQniW9zcgpTwhhHgMvXX1q9EKXAlc\nL4R4+aIurZuNmA6iXxR9IISIk1Jur+Q1tKfyVl69opJI7fIOerdFVynlHqP76G0hxMNSyrNCiFig\nk5RyGfrMkuVCiF/RP6SjgUApZYLQ59y/KYR4Hn2w8CqgiZRy7cUHlFLuEkKkoQ+KL5NSll5BbQWs\nQohngPfQZ620B3yllNucfD3PAsuEEAnoH6Se6B/y/dCn/Jb1stFd0ge9S+NF40OwsnNQnkD0xJNl\nzLh58aKfp6APul6ORcD7QoiJwK/oM4CiKln/RWCbEOK/wJtGUmuNPqmgovGYsgKBHCBXCNEO+Cv6\nBIrK1rcZ63gKIZ5Fb4mU+hT4lxBiP/p4QGfgtJQynfPnpXSc4BNgoRBiJfp7wQ8YAqyTUpbXVXQB\nIcQU9PdTapnWrMOIzWEc62A5m/4KvGUkzI/QWz8dpJRbKtnnBYxJFIeB3sDG8uKTUq4QQpxB77Z7\nF731eifwmRDi7+gtiUnAP4H7pJQacEgI8SH6gPt9xr7N6Bd9LaSUrxu7H8yfJ5nUW2pgvRaRUqai\nD5aXDhw/g/5HvVkIkYN+tSSMdbcC09Df/Nno/dTNje3uRP/j24/etP+eypvh89AHgeeVicWO/mHe\nDX1ef2miCb6E1xMPjEK/akxC76bqDgwwripLJRtxnkEfoH9Anp+/X+E5qMA7gK8R72b0bouy3gVu\nFEJkGmMaTjP64W9Cn3WWjj6YvR295Vfe+kfQE2YLYJ8QIht9vGY75ffZX+wp9C5GK/qH+rdVrL8M\n/fUeRD/XhVzY5fQW+kDxcvTk9Bn6uQI9sc0WQmQJIW42rrTvQ5+UkIn+O5jqRMylRqO/5lz0c36r\nlLJASpmPPlFhg3GsvmU3MhLUNcB49PfFIfR7bCrcZwXHnwncUUWM/wX+JoTwNhLpAPT7Q/aj/36f\nAO6QUpY974+in5MP0BPNEfRk8wuA0O8T6YA+7bdBUDcbKm4ljGm6UsrKuoVqJaNb5RRwu5TyUgfv\nFRcyZpHtAoZL/d6Nmjrum8ARKeWHNXVMd1PdWYpyCYwpzlvQu8yeRh9vcHbmkVJDjNl6HapcsfqP\n+2RNH9PdaiSJCCHeQB9gbIF+5+6fBvaEfiPUe+hNVg14XdZQaQpFuQT90Lv9SrsLJ1bSpaIo9V6N\ndGcJIQag99GuB66tIInciX736xj0+di70PvOj7k8QEVRFOWy1MjAupQyvpKbkkrdAnwipXQYA8w/\nog9iKoqiKLVUbRoTaYbeWil1Av3GI2d5o08bTUIvF6EoiqJUzQN99uY2KphpWJnalESuVC8uvJta\nURRFcd5A9ErGl6Q2JZET6Pc5lN7IdnHLpCpJAJmZeTgcatpyWFgA6en15rEkV0Sdi/PUuTivoZ6L\n4ydS0bbEo+3cSF5QBE1vn0zL7u3Bubpgf1Kbksh3wH1CiB/QB9YnomdGZ9kBHA5NJRGDOg/nqXNx\nnjoX5zWkc1FYVML8b+NZe9pBF2sKkzt1ocl1E7EEnSszdlnDADU1xfc99LuWo4CVQoh0KWVHIcRi\n4AXj7tjSZ0CU3sn8ipTyaE3EpyiKUl9pDgc7F69n3h+5ZJp8iTOd5bZ7RxHSskW17L8+3bHeAjia\nnp7boK4uKhIREUhqqjOVNeo/dS7OU+fivPp+Luz5+eTEr2dtfAI/+3Um1JbLrR19iZswHJP5/MRc\ns9lEWFgA6DX2jl3qcWpTd5bLaJpGZmYqxcWFXFkR17rj7FkzDsefatM1ECa8vHwIDY3AZDJVvbqi\n1BOaplGYeITs+HWkb96KpaQQ0aodI6+yMHHiGHy8LdV+zAaRRHJzszGZTERGNsFkahg1Jz09zdhs\nDTOJaJqDrKw0cnOzCQxsMM8GUhowe34+ORvjyVqzmuzUTFZG9iG79QSenSTwb9mS9lXv4rI1iCRS\nUJBLo0aRDSaBNHQmk5nAwFAyMlJUElHqtaKTJ8n6bTU5mzfiKCriUKu+LAsdSaHDxPi+LfBu3rzq\nnVyhBpFEHA47Hh4N4qUqBg8PTxwOdc+pUv/YCwqwbtpA1trfKD59CpOnJx5xV/OLpT17kwpo2TiI\naWPaERsRUPXOqkGD+WRVfeMNi/p9K/WJ5nBQIBPI3rCe3B3b0UpK8G7WnMa330FgXG8cvn5Y5+7k\n1uFtGNGzCWZzzb3/G0wSqU2Ki4uZOfMD1q//DU9PT7y9vZk27X4GDRpSYzFYrVZ+/vkHbr/9rnPL\nXn/9X4wZcy1du3avsTjKEx+/lj17dvPQQ49Vul5S0hm2bt3MhAnX11BkilKzbFmZZMevJzt+Hba0\nNMy+vgRdPYCg/gPICY1mfvxR7vDyxdfTg+fvisPshosnlUTc4M03X6egoIA5c+bj7e1NYuJhnnzy\nUYKCgujWrUe1HMPhcKBpWoVX5Lm5VubN+/KCJPLss89Xy7Gv1IABgxkwYHCV6yUlneHnnxeqJKLU\nK47CAqzbt5GzcQMFByUAXrFNiLrnfgLi4tA8PFmx7RQLf9iKp4eZYd3zaN0k2C0JBFQSqdDixb8w\nY8bbJCcnERUVzSOPTGfs2PFXvN/k5CRWr17BggW/4u3tDUDLlq258867+eKLT3j33Y9YvPgXli9f\ngre3N6dPn6JRozCef/4VIiIaAzB37izWrl2N3W4nPLwxzzzzT8LCwvnss5kcPZpIXl4uZ8+m8NFH\nn/Pll5+ze/dOSkpKCAkJ4e9/f4GoqGjeeuv/kZuby9Spt+Hj48PHH3/Oww/fz+TJd9C//0Bee+0l\nvLy8OHnyBGfPptCxY2eee+5lTCYTqalnefXVF0lPTyc2NhZNgz59+nLDDbdc8FqTks5w7713MHr0\ntWzfvgVN03jyyWfPtXSWLPmVr7+eg8lkIiamCX/72z8IDW3E4sW/sHHjel599T/s3Lmd9957iw4d\nOrJv3x+AiZdf/jctWlzFW2/9h6Sk00ydehtNmjTh1Vf/c8W/H0VxB81mI2//XnI2biBv9y40mw1L\nZBRhEyYRGNcLr+gYAE6ezeWLxXs4lmyle5twpowUhAZ6uzV2NV2pHIsX/8IrrzxPUtIZNE0jKekM\nr7zyPIsX/3LF+z5y5DCxsU0JCrrwUeUdO3bi8OGD577//fc9PPTQY8yd+x3duvXg3XffAGDZssWc\nPn2amTNn8fnnX9GvX3/ef/+dc9vt37+XF198jW+//YGgoCCmTJnKp59+yezZXzNixCg++kh/rPgT\nTzxDQEAAs2bN4+OPPy831sTEI/z3v+8yZ858pExg+/YtALzzzn/p3r0nc+fOZ/r0v7F7984KX292\ndjatW7dh9uxvePzxp3nppX9SXFxMYuJhPv74fd566wNmz/6Gli1b8fbb/y13H0ePHmHixBuYPfsb\nhg0bwezZnxmv4W+0aNGSWbPmqQSi1DmaplFw5DApX31J4tNPcOa9d8jfv5/gwUNp+vfnaPHq/xE2\nfsK5BAIwf/Uh0nMKeWBCRx6+vrPbEwiolki5Zsx4m8LCwguWFRYWMmPG21fcGnG2QkCXLl1p1qwF\nAOPHT+TOO28FID5+HQkJB7j77ikA2O02AgLOz8Lo168/ISHnp7Vu3ryBH374joKCfOz2S5utNHDg\nkHOtJSEEp0+folcv2LlzB48//jQAUVHR9OzZq8J9WCwWRo0aC0CPHnF4e3tz4sRxdu/eQb9+/QkP\nDwdgwoTrmTr1tnL30axZc9q2bQdAx46d2bBBFWtW6q6SzExyt28lZ/Mmio4fw2Sx4N+lK0H9+uPf\nqTMmzws/lo+czqZRkA+hgd5MG9seL4sHAb7Vf9Pg5VJJpBzJyeUXs6xo+aVo1ao1p0+fJCcn+4LW\nyL59e2nVqk2V22uaxl133c21104o9+e+vn4XxDtjxlt88smXxMTE8scfe3j55eecjtXb2+vc12az\nxyUnoeri5XX+astsNrstDkW5XJrdTt7eP8hev5a83bsA8G7alMa330FQv6sx+/j+aZuiYjs/rEtk\n5faTDOwazdQx7WkU5FPToVdJdWeVIyoq+pKWX4ro6BiGDh3BG2+8TlGR/vyXxMTDfPnl50ybdt+5\n9f74Yw8nT54AYNGin+nZMw6AAQMGsXDh9+Tk5AD6TK9Dhw5Snry8PDw9LYSFheFwOPjxxwXnfubv\n709hYSE2m+2SX0P37j1ZsuRXAFJSktm5c1uF65aUlLBixVIA9uzZRVFREc2bt6BHjzg2bdpAenoa\nAL/88iO9evW+pDj8/QPIy2t4pbyVukHTNAqPHePs11+R+LcnODPjHQqPJhI6cjTNX/oXzV/8FyFD\nh5ebQPYdy+D5z7awYvtJhvSI5ZZhVV9guotqiZTjkUem88orz1/QpeXj48Mjj0yvlv0/+eQzzJz5\nAVOm3IzF4omXlzePPfYk3bv3PLdO585d+eCDdzh16uS5gXWA0aPHkZ2dxSOP3A/os7AmTbqJNm3a\n/uk4rVq1ZujQEUyZcjPBwSH069efPXv0q6CgoGBGjhzDXXfdSmBgUIXjIuV57LEnefXVF1m+fCkx\nMTG0b98Rf//yb2wKDg7m0KGDzJv3JZqm8dJLr2GxWGjZsjUPPPAw06c/ZAysx/L00/9wOobS19es\nWXPuuONmmjdvocZFlFqh+OxZrFs3k7NpAyUpKZg8PfHv3JXAvv0I6NrtT91VF1u/5wxfLEkgMtSX\nZ2/vQdumtbvqQoOo4pucfJyoqEu7/d9Vs7OcPXbp7KTL5craWUVFhXh4eOLp6UlaWhr33Xcn7777\n4bkxnFKls7MWLVrlkjiqUvp7r+/VWi+FOhfnVee5cJSUYN26hZwN689Ny/VtKwjs05fAXr3x8POv\nch8FRTZ8vT3JLShh5faTjO3bHC+LR7XEVxlVxddFxo4dX2NJo645efIkr776IpqmYbfbmDbtvj8l\nEEWp70or5lq3bMK6bSt2qxVL40jCJl5PUL/+WMLCnNpPdl4x81YcJDWrgH/e2ZMAXwsTB7Z0cfTV\nR7VE6qmGXMW3lGqJ/Jk6F+dd7rkoTkkmZ/MmrJs2UpKWqndXde1G8KAh+LXvcMGzOiqjaRqb96Uw\nb+VBikrsjO9/FWP6NMPTo2aHqlVLRFEUxcUcJcXk7dlD9trfyD+wD0wm/Nq1p9G11xHQoycefn5V\n76QMa34xn/56gD8S02kVG8S0Me2JCa+6y6s2UklEURSlHJqmUXj0KNbNG8jZvBlHfh4ewSF6d1X/\ngVhCQy973z5enljzi5k8og3De9RswcTqppKIoihKGcWpZ8lcvoy833djS0/Xbwbs2o3ggYMvqbvq\nYknpefwUf5S7RrfD19uT59xUMLG6qSSiKEqDZ8/PI3fXTnLi11Nw6CCYTPi2bkPY+AlGd9XldzXZ\nHQ6WbjnBT/HH8PI0czotj9ax7iuYWN1UElEUpUFylJToiWPTBnL37Aa7HUtkJOHX30hgn75YwsKv\n+BgnUqx8sTiB4ylWeraNYMrItgQHuL/eVXVSScRNcnJymDhxDNddN4nHH38KgM8+m0lBQQEPP/z4\nufUWLPiWhIQD/POfLwFw4sRxPvpoBocPHyIoKAgvLwuTJ995Sc8imTXr03PFJMeOHc/UqfeWu96i\nRT8zf/487HYHMTGxPPfcSwQFBeNwOPjrX+85dzNmWFg4Tz/9d6KNQnEVbaco7nZunGPbFhK3bMKW\nk4M5IIDQYSMIiOuFT8tW1fpAs+9+O0JmbhEPTuxEXLvG1bbf2kQlETdZsWIpHTt2YuXKZTz00GNY\nLFUXVEtLS+Phh+/nwQcf5f/+T6/qm56extatm50+7u7dO1mzZiVz5nwLwP33T6Vbtx5/eo7JsWNH\n+eSTj/jii3mEhoYya9anzJz5AU8//Q/MZjNvvjnjXOHH+fO/ZsaMt/n3v/9b6XaK4i4laalkr1tL\nzpZN2NLTwWwmrE9vvHv1xb9DpyrvIr8Uh09lExZsFEwc067WFUysbg0uieRs3EB2/DqX7Dt4wCCC\nru7v1LqLFv3Mgw8+ypw5s1i/fi3Dho2ocpsffphP9+49GT163LllYWHhjBlzrdMxrlq1glGjxuHt\nrRdyGzVqHKtWrfhTEklMPEKbNm0JNWag9Os3gIcfvv9cMihbOTg/P+/c7JKqtlOUmlKSkUHurh3k\nbt92bpzDv1Nnwq69joCecUQ1j6rWe2YKi20sWJvI6h2nanXBxOrW4JJIbXD48CFycrLp2bMXGRnp\nLFr0s1NJ5ODBBHr37lvhz+fMmcWqVcsBMJmg7H2k06c/Tdeu3UlJSb6gRldkZBR79vz5eSCtW7fh\nwIH9nDlzmujoGFasWEpBQf4F1YefeupRDh6UBAcH8/bbHzi9naK4SklmJrk7tmHdtpXCI4cB8IqO\n0afl9umHJSLCJcfdezSd2UskGTmFDOvRhOsH1507zq9Ug0siQVf3d7q14Cq//voTo0ePw2QyMXjw\nUN5++7+kpp6tsC/W2T7aO+6Yyh13TAWu/I71Zs2a8/jjT/Hii38HTAwcqD+u1sPjfC2fN954D4fD\nwZw5XzBr1mc89dSzTm2nKNXJUViAdcd2fWbV4UOgaXg1aUrYpBsI7BmHVzVU365MacHEqEZ+PFMH\nCiZWtwaXRNytpKSElSuXYrF4sXTpIgBsNhuLF/9CSEjon55ZkpWVRUiI3jXUtm079u/fV+G+nWmJ\nREZGXXCMlJRkGjeOKnd/I0aMYsSIUYD+xMSFC7//U7Ves9nMtddO4NZbr+epp551ejtFuRKaplFw\n6CA5G+Oxbt2CVlysP052/AQCe/W+4GmArlJaMLF72wgyrUWM6dsMi2fDu1hSSaSGrV+/lqZNm/PR\nR5+dW7Z37++8+uqLvP76W8ye/Rlnz6bQuHEkOTnZrF69gunT/wbA9dffxLRpt7N8+VJGjhwNQGZm\nBps3b2TMmGudaokMHTqcd999gxtuuAmAZcsWnXtK4cXS09MICwunqKiIzz77H5MnTzGOmYnJZDr3\nBMU1a1bSqlXrKrdTlCtVnJxMzqYN5GzagC0jA5O3D4G9+xJ0dX9827St1plVFcnOLWLuioOkZRXy\n3F16wcTrBlzl8uPWViqJ1LBFi35m5MgxFyzr1KkLDoeDzMwMHn30CZ599kkcDgeapnHDDbcQF6c/\nrCk8PIL33/8fH330Hp988hG+vj74+voxZcpdTh+/R484Bg0aypQptwAwevTYc2Mk8fFriY9fx7PP\nPg/Av//9CikpSZSUlDB8+EhuvFF/RG9GRjqvvfYSdrsNTdOIjo4597yTyrZTlMthy84id6d+P0dh\n4hG9blXHToRPuoGA7j0x+9TM4LWmaWz4I5lvVx+iqMTBhAEtauS4tZ2q4ltPqSq+qopveerKudAc\nDvJ+30PW6pXkG124XjExBF09gMA+/a6oblWpSzkXOfnFfPLLfvYdzaBNk2CmjmlHdFjdLJh4MVXF\nV1GUekFzOCg4fIjcnTuwbtuCPTsbs68vYRMmEdCtB95Nm7otNl8vTwqKbEwZ2ZYh3WPrTcmS6qCS\niKIobqPZ7Xri2LEd645t2LOzMXl64te5C0F9+uHfuQtmb/eUCUlKz+PH9UeZOkYvmPiPO3qq5FGO\nBpNENE2rkUE3pXaoR9209VJJRgZZq1eSszEee07O+eeQ9+6DX8dOl/x8jupks+sFE3/ecBRviwdn\n0vJoVY8KJla3BpFEzGYP7HYbnp71t/SAciG73YbZ3PCmW9ZmjqIicnfvxLp5E3l7/wBNw7dde4Jv\nmUxA126YfXzdHSLHk618sfgAJ87mEteuMbdf05Zgfy93h1WrNYgk4usbgNWaRUhIGCZTzT56Uql5\nmubAas3E11fdm+JumqZRIBPI2bwR67ZtaEWFeISE0GjstQRd3R+vyPLvUXKX79ceITuvmIcmdaan\ncM3d7fVNjSURIURbYDYQBqQDd0opD120TmPgC6ApYAHWAI9KKW1XcuyAgGAyM1NJSTkFNIxuDrPZ\njMPRUGdnmfDy8iEgQJVZcZfis2exbtmEdctmipOTMPv6EtCjB8EDB+Pbus1lP9jJFQ6ezCI82IdG\nQT5MG9MOby8P/H1Ur4WzarIl8jHwgZRyrhBiCjATGHbROv8ADkgpxwkhLEA8cD0w/0oObDKZaNSo\nfpZhrkhdmcqp1B+aplGQcIDnMiYQAAAgAElEQVT0n388V/DQp1VrIqfdQ2CvPpi9ale3UH5hCXOW\nS9bsPM2grjFMHdOuQRRMrG41kkSMFkYP4Bpj0dfA+0KICCllaplVNSBQCGEGvAEv4HRNxKgoyuXR\nbDas27aQuWolRceO4hEYqD/YqW8/LI3C3B1euX4/ks7cFQdJzyrgmrimXD+o4RRMrG411RJpCpyW\nUtoBpJR2IcQZY3nZJPIvYAGQBPgD70spN1zKgYybZhT01oiiU+fivOo6F4UpKaSsXE3KshWUZGfj\n2ySWlg/cR+NhQ/Fw07RcZyzbfJz3v9tD08gA/vPIQNq1aOTukOq02jawfhPwOzAcCASWCCFulFJ+\n7+wOyrtjvSFS3VnnqXNx3pWeC32G1S6y1/1GgUzQn9HRuQsRQ4bh37kLJpOJjJxioLj6gq4GmqZR\nUGTHz8eTtjGBTBrUkjvGdSArM7/BvzfK3LF+WWoqiZwEYoUQHkYrxAOIMZaX9Qhwt5TSAWQLIX4C\nhgJOJxFFUaqXpmnk/b4H67Yt5O7ahVZUiCU8grAJkwi6egCWsNrZZVUqK7eIOcskGTlF5womjr+6\nRYOsuOsKNZJEpJRnhRC7gcnAXOP/XReNhwAcBUYDW4UQXsAI4IeaiFFRlAs5iorI2bCerDWrKU46\nA0DQ1QP0irltRa2aYVUeTdOI/z2Jb1YfxmZ3MHFgw62060o12Z31ADBbCPECkAncCSCEWAy8IKXc\nDjwOfCyE+APwQJ/i+0kNxqgoDVrpDKustWvI270LzWbD56qWRE69h8A+fTBbatcMq4rk5Bfzv5/3\nsf9YJm2bhjB1TDuiGrnvLvj6rMaSiJQyAehTzvKxZb4+wvkZXIqi1BB7fh7W7dvIWrWS4tOnMPv5\nEzxoCIG9euPTuk2dKxnk6+VJUbGdO0YJBneLUSVLXKi2DawrilJDNE0jf99erFs3Y92+Da24GK+Y\nWCKn3UtgXC+3FT68XKfT8vhxfSJ3j21/rmBiXUt+dZFKIorSgGiaRtHJk1i3bcG6YzslKclgNhPU\nfwAhg4bg3eKqOvfBa7M7WLz5OL9uPIaPlydn0vNoFRNc515HXaWSiKI0ALbsbLLX/cbJHdsoOHUK\nzGZ82woajR1HYFzvOtfqKHU0KYcvFidwKjWX3u0bc9s1bQnyqxvjNvWFSiKKUk9pNhu5e3aRs2kj\n+Xv/QLPZCOrUkcDBwwjoGYdnUJC7Q7xiC9clkltQzCM3dKZ7G1Uw0R1UElGUesaWnUXOhniyfluN\nLSMDj+BggocMJWTocGI7tanzN9fJE5lEhPjqBRPHtsfbYsZPFUx0G5VEFKUeKH0mefa638jbtxfs\ndnzbChrfdgf+XbrW+ns6nFFQZOO7347w267zBRNDA+tmN1x9opKIotRR+iD5CaybNmLdvhVbZiYe\nwcGEXjOK4AED8YqKdneI1eb3I2nMXirJyi1iZK+mTBqoCibWFk4nESGEJ9ALiJVSfi+E8AWQUha4\nKjhFUf7MlpVF1to1WLdupiQlBTw89PpVt0wmoHtPTB71q5zHuj1nmLUkgdhwfx6c1IlWMeo5MbWJ\nU0lECNER+Mn4Ngq9ltVw4Hb0EiaKoriQo7AA647t5O7Yfv7RsqIdoSNHE9gjDo/A+lWlWC+YaMPP\nx0JPEYE1v5hRvZvh6VH3u+XqG2dbIh8Br0opZwkhMo1lv6E/aEpRFBfQNI2Cg1J/QuC2rTgKCvBs\n1Ejvrho0BK/ISHeH6BKZ1tKCiYU8d1cc/j4WxvVr4e6wlAo4m0Q6oz/aFozny0opc4UQqhiNolSz\nkvR0rFs2kR2/npKzKZi8fQjo1p2QYcPxadmq3t5Ep2ka6/acYf6aw9jtGpMGtVTlSuoAZ5PIcaA7\nsLN0gRAiDjjiiqAUpaFxlJSQ9/tucuLXn++uatOWsGuvI6BnXJ29GdBZOXnFfPzTXhJOZNGumV4w\nsXGoukatC5xNIi8Ai4QQHwJeQoingYeAv7osMkVpAIpOnyZn43pyNmzAnmvFIziYRmOvJXjAICwR\nDefmOV9vT2x2jbtGCwZ1jam3ra36yKkkIqX8WQiRBNwHbAAEcIuUcosrg1OU+sheUIB16xZyNsZT\neOTwudlVIUOG4de+Q72bXVWRU6m5/Lj+KPeM0wsm/n1KD5U86iBnZ2dNklIuBLZdtHyilPJHl0Sm\nKPVMcUoKWauWk7N5E478fCyRUYTfeDNB/QfgGVj3S5A4y2Z3sGiTXjDR19uTpPR8WsYEqQRSRznb\nnTUbWFjO8s8BlUQUpQL2/Dzydu8me2M8BQkHMHl6EtAjjpDhI+r1IHlFEs/k8MWSA5xOzaNvh0gm\nj2hDoCqYWKdVmkSEEM2ML81CiKZA2Xd8S6DIVYEpSl2l2e1Yt28ld+cOcndsB8CzURhh100keNBg\nPENC3Ryh+/y4PpH8QhuP3tiFbq3D3R2OUg2qaokcw5jSiz5Dq6w04MXqDkhR6ipbdhbZ69aSvX4t\ntowMTF5eBA8ZRmDvPvi2blMv6lddjgPHM4kMPV8w0cfLA19vVXGpvqjqN2lBb32sBQaVWa5JKR0u\ni0pR6gjN4SB//z5yNqzHunOHXviwXXsibr2dgC5dMXk23A/L/MIS5q85wro9ZxjcLYa7RquCifVR\npe9wKaXd+LJ/DcSiKHVG0ZkzWLduJmdDPLbMDMy+voQMHU7IkGF4RUW5Ozy323UolTnLJNl5xYzp\n04wJA65yd0iKizg7O8sD+AswGAinzNiIlHKYa0JTlNrFlpNDzqYNZK/9jZKzKWAy4dehIxG3Tsa/\nSzfMFvVMC4Dfdp/my6WSJhH+PHJDF66KbjgzzxoiZ9vabwGjgE+Al9HHQv4CfOOiuBSl1ihJTSVj\n2RJy4teh2Wx4N29B2IRJBA8cjGdIiLvDqxU0TSO/yIa/j4Ve7RpTUGTjmrimqmBiA+BsErkR6C+l\nPCaEeEFK+aYQYjF6YUZFqZfyZQJZq1aQu2snmM0EXd2f0GtG4x0T4+7QapWMnEK+XCbJshadK5g4\npk9zd4el1BBnk4gf52dn5QshfKWUB4QQPVwUl6K4haOkBOuWzWSvW0NhYiJmP39CR40hZPg1WEIb\n7tTc8jg0jXW79YKJDk3j+kGtVMHEBsjZJJIAxKHfsb4DeEEIkQ2ccVVgilKTbFmZZK9bS9a637Bn\nZWGJiiLitikE9x9Y74sfXo7svGI+/nEv8mQW7ZuHcteYdjQO8XV3WIobOJtEpgOlU3qfBGYCgcAD\nrghKUWpK4YnjZK5YhnXrFrDb8evQkdCp9+DXsVODu5v8Uvj7eKJpGtPGtGNAl2h1rhqwKpOIMTOr\nLfAtgJRSAkNcG5aiuI6maeTt3knG0iUUHjmMycuLkCHDCBk2ot4+6Kk6nEix8uP6o9x7bQf8fDx5\n5nZVMFFxIolIKe1CiBlSyi9rIiBFcRVHYSG5O3eQsXQxxWdOYwmPIPymWwgeOAgPP393h1drldgc\n/LLxGEs2H8ffx5PkDFUwUTnP2e6sRUKIsVLKxS6NRlFcoCg1ldTvfyZ77RocBQVYIiOJvHMaQf0H\nNJiy65fr8Olsvlh8gKT0fK7uFMWtw9sQ4Kvuh1HOczaJmIEfhBDxwEnO19NCSnm3KwJTlCuhaRoF\nMoGsVSs59PtuNIeDgJ5xhAwdjm+btg22jtWl+nnDUYpK7Dx+U1e6tApzdzhKLeRsEjkE/NeVgShK\ndXCUFJOzcSNZK5ZRnJyER2AQ0ePG4H31YCzhDedJgVdi/7EMIkP9CAv24e6x7fG2qIKJSsWcfbLh\n864ORFGuhD03l6y1a8hatQJ7Tg7ezZoTOfVuAnv3JTI2jNRUq7tDrPXyC0v4ZvVh4n9POlcwMSRA\nTW9WKqcuL5Q6zZaVSfqiX8nZsB6tuBi/9h0JvXes/phZNfDrtJ0HU5mzXGLNK2Fs3+Zc17+Fu0NS\n6giVRJQ6qSQtlcyVy8n+bQ2aphHUpx+hI0fh3aSpu0Orc37bdZovl0maNg7gsRu70CJKFUxUnFdj\nSUQI0Rb9MbthQDpwp5TyUDnr3Qw8j14pWANGSClTaipOpXYrPHGczKVLsG7fCkBQ3340Gjcer0hV\nfv1SaJpGXqGNAF8Lvds3prDYzoi4JqpgonLJarIl8jHwgZRyrhBiCvpd7xeUkRdCxAEvAcOklMlC\niGDUI3gbPE3TyD+wn8yli8nfvw+Ttzehw68h5JpRWBo1cnd4dU56diGzlyWQnVvM83fF4edjYXSf\nZlVvqCjlcDqJCCGmAZOBCClldyHEQCBSSvm9E9s2BnoA1xiLvgbeF0JESClTy6w6HXhDSpkMIKXM\ndjY+pf7RHA5yt28jY+liik4cxyMwiPDrbyR48FA8/NXNgZfKoWksik/ki0X7QYMbh7TCbFbjRsqV\ncfahVC8DY4F3gfeNxWeAd4AqkwjQFDhd+qRE4y74M8byskmkA3BUCLEOCAB+AF6TUmoX71CpvzSb\nDev2raT/+jMlyclYIiKIvGsagX37YbZ4uTu8Oik7r5gPF/7BoVPZdLyqEXeNEoSrgolKNXC2JTIN\n6CmlTBVCzDCWJQItqzkeD6ALeovFC1gKnACcLrkSFhZQzSHVXRERge4OoVI//PADr7/+OmfOnCEm\nJoZnn36aAeERnPp+IQWnTuHXrCkt//YkYf36XvHNgbX9XLhaSKgDb29PHr+1O8PimqqZa4aG/r6o\nDs4mEU8gx/i6tFUQAOQ6uf1JIFYI4WG0QjyAGGN5WSeA76WURUCREOInoDeXkETS03NxOFTDJSIi\nsFbfG7F48S+88srzFBYW4mU2081mx/LFlxyyeOEVE0P0Aw8S0CMOzWwmLT3vio5V28+Fq5xIsbJw\nXSL3je+In48n02/sQuPGQQ3yXJSnob4vLmY2m67o4tvZJLIUeEMI8USZZS8Bi5zZWEp5VgixG31M\nZa7x/66LxkMA5gFjhRBzjNiG41x3mVLHzJjxNvaiIiZFxzA+MoYAT0/25mTzbXYWb/3vc1WW5AqU\n2Oz8vOEYSzafIMDPQkpmPldFq4KJimtcyvNE5gLZgLcQIgdYC0y5hGM9AMwWQrwAZAJ3AhiP2X1B\nSrkd/ZntccB+9OeXLAM+u4RjKHWA5nDQvLCI5zt3I9zLm22ZGfySkkRCrhWTyaQSyBU4dCqLLxYn\nkJyRT//OUdwyTBVMVFzLpGnOd/0IIWKBZsBJKeUpl0V1eVoAR1V3lq62NtVzd+0k7aeFFJ86yfH8\nPGadPM4+a865n0dHx7BkyepqPWZtPReu8Nb83SSl5XHX6HZ0avnngokN6VxURZ0LXZnurKuAY5e6\nvbOzs94AvpJS7gJOX+pBFKXwaCKpC76jIOEAlqgoUnrG8eLsT8kvLDy3jo+PD488Mt2NUdZNexPT\niQrzIzzYl3vGtsdLFUxUapCz7zRfYKkQIgN93GKelPKI68JS6ovilGTSf/oR69bNmP38ibhlMiHD\nRnCVhwfPNW/OjBlvk5ycRFRUNI88Mp2xY8e7O+Q6I7eghG9XHWLD3mSGdIvhztHtCFYFE5Ua5nR3\nljGjaiT6oPgEIAG9dfKe68K7JC1Q3VnnuLupXpKeRvovP5GzcQMms5nQUWMIHT0WD9+avzfB3efC\nFbYnnGXuioPk5pcwpm8zruvfAotn1Q/Yqo/n4nKpc6Grke4s0G8QBJYAS4QQMcAs4G2gtiQRpRYo\nTj1L5pLFZG9Yj8lkImTocBqNGYdnSIi7Q6s31uw6zZxlkmaRATxxc1eaRap7HRT3uZSyJ77oLZDJ\nwAhgA3CPi+JS6hhbdhZpPywgZ2M8Jg8PggcMpNHY8VjC1NPwqoOmaeQWlBDo50Wf9pGU2BwM7xmL\nh5rJpriZswPrXwPjgL3oda/uV5V1FdAfBpW+6Bey165Bs9sJHTGSkJGjsYSGuju0eiMtq4DZSxPI\nzivhhalx+Pl4MrKXKnmv1A7OtkT+AP4hpTzqymCUusNRVETWqhVkLFuCIz+fwN59CRt/HV5R0e4O\nrd5waBqrd5xiwdpEMMFNqmCiUgs5+3jcf7s6EKVu0Gw2suPXkf7TQuxWK36dOhNxw814N1VXxtUp\nO7eIDxbu5fDpbDq1bMSdowThwapgolL7VJhEhBB/SCk7G18f5XzNrAtIKau7CKNSC2maRu6O7aQt\n/J6SlBS8mzYl5uHH8G3V2t2h1Uv+vhY8PUzce217+nWMUiVLlFqrspbIw2W+vtfVgSi1V9Gpk5z9\nZh4FCQf04ogPPkJA9x7qg62aHU+2snB9IvcbBROfntxdnWOl1qswiUgp15b5NkhKufDidYQQE10S\nlVIrlGRmkv7TQnLi12H28yPitimEDB6KyaPq+xEU5xWX2Plpw1GWbTlJoCqYqNQxzg6szwb+lESA\nz4Efqy8cpTZwFBeTuWIZGYt+QbPZCLlmFGHjxuMRoJ7VUt0OnsziiyUJpGTkM7BLNDcPa42/jyqY\nqNQdlSYRIUTpg5fNQoimQNlLo5ao55/XOwWHDpIyZxbFZ84Q0KMn4Tfeglfjxu4Oq95atOk4druD\nJ2/tRscW6nnxSt1TVUvkGOcH1I9f9LM04MXqDkhxD0dREanfzyd7zSos4RHEPPwYAd26uzuseun3\nI+nEhOsFE+8e1x4fiwfeXqqLUKmbqkoiFvTWx1pgUJnlmpTS4bKolBqjaRrWbVtI+/47bBnphAwb\nTvj1N2L2UdNJq1tuQQlfrzzEpn3JDOkey52jBMH+6pnxSt1WaRIx6mUB9K+BWJQaVnjiOKnzv6Eg\n4QDezZoTfd9f8G3T1t1h1TuaprFdpvLVckleoY3xV7fg2qtbuDssRakWld0nskhKOc74eg0V3ycy\nzEWxKS7iKCoi7YfvyVq9ErOvL41vm0KwmnXlMr/tOs2c5QdpHhXIk7e2p2ljNUFBqT8qa4l8W+br\nua4ORKkZBYlHSPr4Q2wZ6QQPHUb4pBvw8PN3d1j1jqZpWAtKCPLzok+HKGwOjWE9VMFEpf6p7D6R\nL8t8rZ5zXsc5iopI//VnMpcvxRLaiCZPP4ufaOfusOqls1kFfLk0gZy8Yl6Y2gs/H0+uiVNlYZT6\nydkqvjcDv0spE4QQbYCPAQfwkJTyoCsDVK5c/kFJ8qczsWVnE9i7D41vnoxHoHoGRXVzODRW7jjF\nD+uOYDaZuGloa1UwUan3nL3Z8N+cH1x/E/gdyAM+Aoa7IC6lGjgKC0n74Tuy1qzGMyyMJo8/iV/7\nDu4Oq17Kyi3i/R/+IPFMDl1ahXHnKEGjIB93h6UoLudsEmkspUwRQngDA4GbABuQ6rLIlCuSuXMX\nxz/6hJKzKca03Zsw+6gPNVcJ8LXgbfHg/vEd6NMhUpUsURoMZ5NIuhCiJdAZ2C6lLDKedKj+UmqZ\nksxMUr/9mtztW7FERNDkqWfwa9fe3WHVS0eTcli4LpEHJnTEz8fCU7d2U8lDaXCcTSKvAjvRx0Em\nG8uGo3drKbVE7p7dJH/xKY6CAppOvgXvQcMxW9TNbNWtqMTOT/FHWbb1BMH+XqRmFdI8yqISiNIg\nOftQqs+EEPONr63G4u3Aba4KTHGeZreT9v18Mlcswyu2CTHPPkds5zakplqr3li5JAnHM5m1NIGz\nmQUM6hrDzUNb4+fj7LWYotQ/l/LuNwPjhBCxwGlgkZQy2zVhKc6y5+WR/Nn/yPt9D8GDBhMxeQpm\ni6oC6ypLtpxA0zSevrUb7VXBREVxeopvb2AxkIheiLEZ8J4QYpyUcosL41MqUXjiOGc+nIE9K4uI\n26YQOmyEu0Oql/YcTiM2wp/wYF/uGdceby8PvC3q7n5FAedbIu8Bj0spz925LoS4zVjexxWBKRXT\nNI3s9WtJnTcXs78/TZ56Bt/WbdwdVr2Tk1/MNysPsXl/CkO7x3LHKEGQKpioKBdwNokIYN5Fy74F\nPqjecJSqOEpKSJn9OdbNm/Bt157o+x7AMzjY3WHVK5qmsfXAWb5acZCCIhsTBlzFuH7N3R2WotRK\nziaRw8CNwPwyy65H795SakhJaipJn3xMYeIRGo0bT9iESZhULaZqt2bXaeYuP8hV0UFMG9uOJhGq\nYKKiVMTZJDId+FUI8Sj6mEgLoANwnYviUi6Su3sXyZ9/Ag4H0X95kMBevd0dUr3i0DRy80sI8vei\nb4coNA2Gdo9VZUsUpQrOTvGNF0K0Bq4FYoAVwK9SyjRXBqcY4x9rVnF23ly8W1xF9H1/wSsyyt1h\n1SspmfnMXpKAtaCEF42CicN7NnF3WIpSJzg9xVdKmSaEWIKeRM6oBOJ6ms3G2XlzyF63Fr9OXYh5\n8GHMXmpgt7o4HBrLt53kx/WJeHiYuHloazxUy0NRLomzU3ybAHPQ62blAEFCiPXAnVLKky6Mr8Gy\nZWeT9L+PKJAJhI4aQ/gNN6nxj2qUlVvEjAW/czTJSrfW4dwxShAa6O3usBSlznH2U2k2sA9oJKVs\nBIQBe4EvK91KuSwFiUc48e9XKEw8QuTUe4i46RaVQKpZgK8FP29P/nJdRx65obNKIIpymZztzuoF\njJZSlgBIKbOFEE9xCVV8hRBt0ZNRGJCO3oo5VMG6AtgFfCilfMrZY9QH1p07SP50Jh6BgTR95h/4\ntLjK3SHVG4lncli47ggPTOyEv4+FJ2/t7u6QFKXOc/bydivQ86Jl3YzlzvoY+EBK2Rb9/pKZ5a0k\nhPAwfvbjJey7XshctYKkj97HKyqa5s+9pBJINSkssvHNqkO8Nmc7Z9LzScsqdHdIilJvONsSSQCW\nCCF+AU4CTYHxwFwhxAulK0kpXylvYyFEY6AHcI2x6GvgfSFEhJTy4tbMs8CvQIDxr0HIWrOa1G/m\n4d+pM9EPPITZW3WvVIcDxzKYs+Igyen5DOkey01DWuHrrQomKkp1cfavKRj9g92EXjcL4/sQ4x+A\nVsn2TYHTUko7gJTSLoQ4Yyw/l0SEEF2BUcBQ4HknY7tAWFjdyzunFizk7FdzCe3Vk3bPPF1tBRQj\nItQjcD/8aR8mk4l/P9ifzq3C3R1OraDeF+epc3HlnL1P5A5XByKEsAD/A6YZSeay9pOenovDUVk+\nq13SF/1C+sIFBPbqTdjd95GeVQhceXdLRERggy0Fv+tQKk0iAogI8WXKNW2IjQ7Gml3QYM9HWQ35\nfXExdS50ZrPpii6+a2rKz0kg1hjvKB33iDGWl4oGWgGLhRDHgMeB+4QQ/6uhGGtc1m+r9QTSpy9R\n9z2gSrhfoZy8Yj7+aS8zFvzB0q0nAAjy88LHS3VfKYqr1Mhfl5TyrBBiN/pTEeca/+8qOx4ipTwB\nnOtvEEK8BATUx9lZmqaR/vOPZPzyE34dOxF1931qCu8V0DSNzftT+HrlIQqLbUwaeBVj+qqCiYpS\nE2ryEu0BYLYxEJ8J3AkghFgMvCCl3F6DsbiNpmmkfj2XrNWrCLq6P5F33Y3JQz2b4kqs3nmar1Yc\npFVMEFPHtic23N/dISlKg1FjSURKmUA5zx6RUo6tYP2XXB2TO6TN/4as1asIHjqcxrdNUc/lvkwO\nTcOaX0Kwvxf9OkZhNsHgbqpgoqLUNKeTiBBiKHArECmlnCiE6AEESinXuiy6eiZjySIyVywjZNhw\nIiarBHK5UjLymbUkgdzC8wUTh/ZQBRMVxR2c6ogXQjwIfIY+ED7UWFwMvOaiuOqdrDWrSFvwHYG9\n+xBx6+0qgVwGu8PBki3HeeHzrZw4m8vIuKaqYKKiuJmzLZEngRFSykQhxJPGsgNAe9eEVb9krlxO\n6jfz8OvUWQ2iX6ZMaxHvLfid48lWurcJZ8pIVTBRUWoDZ5NIIPrDqOD8TYWe6K0RpRI5Wzbrd6J3\n607MAw9h8lTTTS9HoJ+FQF8LD0zoSK92jVVLTlFqCWcvieOBi6faPgSo8ZBK5P6+m+RPZ+Lbpi3R\nf3lQJZBLdPh0Nv/9ehd5hSV4eph54pZu9G4fqRKIotQizn6qPYL+eNz7gEAhxD70Vki5M6sUKDhy\nmKQP38e7SVNiHp2ubiS8BEXFdhasO8Kq7adoFORNenYh/j7q/ClKbeRs2ZPTxmysq9FrZ50ENpXW\nwlIuVJySzOl338KzURixjz+Bh6+vu0OqM/Ydy2D2kgTSsgsZ1iOWGwargomKUptdyuNxNWCD8U+p\nQElGBqfffhOTpyexjz2BZ3BI1Rsp56zcdhIPDzPP3t6Dtk3VuVOU2s7Zx+MepYIqvVLKltUaUR3m\nKC4m6eP3sedaiZ3+FF6Rke4OqU7YeTCVpo31gol3j2uPt8UDL4u6i19R6gJnWyL3XvR9NPo4ydfV\nG07dpWkaKV98SmFiItF/fRjfVq3dHVKtl51XzFcrDrI94SzDesQyZaQg0M/L3WEpinIJnB0TWXXx\nMiHEKmAx8E51B1UXZa1YhnXbVsIm3UBgzzh3h1OraZrGxr3JfLPqEEUldq4f1JLRfZpVvaGiKLXO\nlYxYFgCqKwv9bvTU774loEdPGo0Z5+5war3SgomtY4OZNrYd0WGqYKKi1FXOjom8cNEiP2AcsLza\nI6pj8vb+Qer8b/Br34Go+/6i7kavgEPTyMkrJiTAm6s7ReFhNjGoa4wqmKgodZyzLZE2F32fB3wA\nzKrWaOqYopMnSJr5IZbwCKL/8iBmi+rPL09Seh5fLEmgoNDGi9N64evtyZDuse4OS1GUalBlEjGe\nQrgCmC+lvPLnttYT9vw8zsz8EJOXN7HTn8TDX3XJXMxmd7Bs6wl+ij+Gt8XMrcPbqIKJilLPVJlE\njOedz5BSflkTAdUVKV/OoiQlhSZPPI2lUZi7w6l1Mq1FvPv9Hk6k5NJTRDDlmrYEB6iCiYpS3zjb\nnbVICDFWSrnYpdHUEdnr15K7fRuNrh2PX/sO7g6nVgr0sxAS4M21/VoQ166xu8NRFMVFnE0iZuAH\nIUQ8esmTczceSinvdkVgtVVJRgap332LT8tWhF03yd3h1CqHTmWxcF0iD13fGX8fC4/f1NXdISmK\n4mLOJpFDwH9dGUhd4JRYTZoAABTPSURBVCgpIenj99FsNvVckDIKi20sWJvI6h2naBTkowomKkoD\nUmkSEUJMllJ+LaV8vqYCqs3SFy7Q70h/4EG8oqLcHU6tsPdoOrOXSDJyChneswnXD26Jj5cqmKgo\nDUVVf+0zUaVNACg4dJDM5UsJHjyUwLje7g6n1li1/RReFjPPTulBmyaqYKKiNDRVJRE1HxNwFBWR\n8uUsLBGNCb/xZneH43bbE87SLCqQxkbBRB8vDyyeqmCiojREVSURDyHEUCpJJlLK1dUbUu2TtnAB\nxUlnGvyzQbJyi/hq+UF2HExVBRMVRQGqTiLewGdUnEQ06nn9rILERLLWrCJ48BD8O3VxdzhuoWka\n8X8k8e2qwxTbHNw4pBWjejd1d1j/v707j5KqvhI4/qX3vaGbrRtZZLuALAYFgyAugHEXFaOoIRnN\nYk5GozE5M8eZZDB7JsloEnE0xqDCgCBmNCAEh02DRmRV2a7s+9JAN/RCb1U1f7zXdNt0t9Vl16uu\nqvs5h0P3q7fc+p2u363fW+7PGNMOfFYSKY/n+UL8NdUce3kmiVlZdL7jzkiHEzHL1x9kzrIdDLwg\nl6/dMJjueRmRDskY007YbTQtOPXmIqoPHqDwoUdIzIivsiZ+f4DT5dV0yk5l7LACUpITGTe8gIQO\ndpnMGFPPLqw3o3L/Por/tpjsMZeTNeLiSIfjqcMnynlxyXYqqmqZ7hZMHD+iMNJhGWPaoRaTiKpm\nexVIe+KvqeHwM3+gQ1oaXe+6J9LheKbW52fJmv0sfHcPqcmJTJ1oBRONMS2z01lNOLXwDWpPnHBO\nY2VlRTocTxSXVvHUqx9y4HgZowZ15Z5JA8nNtDuvjDEtsyTSSHXRcU4tXULWFy6Jq9NYOZnJ5GWn\ncuu4Cxk5sEukwzHGRAkr/tTI8dkvg89H5ymxfzeW7i/ml7PXU3a2hsSEBL575whLIMaYVrGRSANn\nd++iYstmOl4zgZRusVsb62xVLQve3sXKDYfonJtGcWkVWelWMNEY03qWRFwBn4+jLzxPYk4OnW+P\n3VHIR7tO8vLS7RSfqeLaUT257Yq+pKZYyRJjTGgsibhK17xPzbGjdH/gGySkpUU6nLBZtfEQaSlJ\nPP6VofTrkRvpcIwxUc6zJCIiA4GXgHzgJDBNVXc0WueHwN2AD6gBHlfVpeGOLVBbS9FfXiWlsJDs\ny8aE+3CeCgQCrN1+nD4FOecKJqYmJ5KcZJfDjDGfn5c9ybPADFUdCMzAKTPf2AfAKFUdDtwPzBOR\nsFc8LHl7Jb6SEvIn3xFTE00Vl1bx9F8+5tk3tvB/HxwAICs92RKIMabNeDISEZGuwEhgkrtoLvC0\niHRR1aK69RqNOj7CeWI+HzgYrth85eWceHUeaf36k/WFkeE6jKcCgQBvrdnHn97YTK3Pz51X9+Pa\nUVYw0RjT9rw6ndUTOKSqPgBV9YnIYXd5UTPbTAN2qWrYEghA0avzCPh8dL3nPjrESF2oZesPMnfZ\nDqRnR752/SC6WcFEY0yYtMsL6yJyJfAT6kcuQcvPD/4J89qyMj5Z/Q4dLx5Bz0uHtfZQ7YrPH6Ck\ntJL83HQmXz2ArvmZXHNpLxKsbAkAXbrEZQWfJllb1LO2+Py8SiIHgB4ikuiOQhKBQnf5p4jIGGA2\ncKuqamsPdPJkGX5/ILh131wIQOZVEykqKm3todqNQ0VlzFyynbNVtTxx/2iSEhOYOLp3VL+nttSl\nS7a1hcvaop61hSMhoUOrvnyft30bxtIsVT0ObAKmuoumAhsbXg8BEJFRwDxgiqpuCGdM/upqSpa9\nRUqPC8gcGp2jkFqfn7+u3sP0mWs5XnyWm8f2sYKJxhhPeXk660HgJRH5EVCMc80DEVkM/EhV1wHP\nAOnAcyJSt91XVPXjtg6mZMUyfKWldP/6t9p6154oLq3iyfmbOFhUzmVDujF14gBybKpaY4zHPEsi\nqroduKyJ5Tc0+HmUF7H4K89y8vW/kDF0GJkXDfXikG0uJzOZzrnp3D6+HxcP6BzpcIwxcSouHxg4\nuWghgdpa8r50faRDaZXt+4r5eYOCiQ9PGW4JxBgTUe3y7qxw8ldWUvy3xaT160/G4CGRDicoFZW1\nLFi1k1WbDtOloxVMNMa0H3GXRIqXvQVA/q23RTiS4Hy48wQvL1VKyqr40uieTL6iL6nJVjDRGNM+\nxFUSCfh8nFz4Bmn9B5A55KJIhxOUtzcdJiMtie/cNoy+hTmRDscYYz4lrpJI8bK3wOcjd9wVkQ6l\nWYFAgDXbjnFhQQ7dOmVw/42DSUtJJCkxLi9fGWPaubjqmcrWrwMg5/JxEY6kaafOVPL7BR/xx79u\nZfk6p9pLVnqyJRBjTLsVNyORs7t2Url7F52uu6HdVer1BwK8s+kw81fuxO8PcPc1/Zl4qRVMNMa0\nf3GTRE7872t0SE0j74YbIx3KeZavO8jc5TsY1MspmNi1kxVMNMZEh7hIIjUniji7fRs5464gMSMz\n0uEA4PcHKCmrIi8njXHDC8hIS+Lyod1jppKwMSY+xEUSKVm1EqDdPFx4sKiMmYu3UVnt44n7R5Oe\nmsTYYQWRDssYY1ot5pOIv6aGM/94l/QBA0kpKIxoLLU+P4ve28ub/9hHRloS904aaAUTjTFRLeaT\nSNn6tfhOnybv/m9ENI5TZyp5cv6HHDpRzpiLunH3hAFkW8FEY0yUi/kkUrJ8GUl5+RErcRIIBOjQ\noQO5WSl0y8tgylX9GNHf6l0ZY2JD+7rXtY3VnDpF5Z7dZI0cGZHberfuPcXPZ9UXTPzn24dZAjHG\nxJSYHomUbVwPQO648Z4et6Kyhvkrd/LOh0fo1imdkjIrmGiMiU0xnURKVi4ntWdPUi/w7sG9jZ8U\n8fJbypnyaq6/rBe3jruQFCuYaIyJUTGbRGpOFFFz9Ch5N93i6XFXf3yE7PQUHr5jOBcWWMFEY0xs\ni9kkUrZpIwDZo8+bTLFNBQIB3t96jL6F9QUTU5OtYKIxJj7EbE9XuuZ9krt1J7WwR9iOcepMJb9b\n8BHPL6wvmJiZZgUTjTHxIyZHIr6Kcir37CYnTBfU/YEAb288xKurduEPBJg6YQATLrkgLMcyxpj2\nLCaTSOnaDwDIvnRUWPa/bN1BXlm+gyF9OvHV6wbRpWN6WI5jjDHtXUwmkYpt2+iQnExGG85e6PP7\nKSmtJj83jfEjCshOT+aLF3WzgonGmLgWc0kk4PdTsXUL2aMua7MHDPcfK2Xm4u1U1fj48QOjSUtJ\nYszQ7m2yb2OMiWYxl0Qq9+zGX1FOxtChn3tfNbV+Fr63lyXv7yMzLYn7rhUrmGiMMQ3EXBKp2rcX\ngPT+Az7Xfk6dqeS38zZx5GQFY4d2564JA+ypc2OMaSTmkkj1sWN0SE4mOS8/pO0bFkws7JzJ3RMG\nMKxvaPsyxphYF3MPNFRs3Uz6QAlp2y17TvGzWespragmMSGB79w2zBKIMca0IOZGIoGaGhJzWldu\npLyyhnkrdrL6oyN0y8vgdHm1zfVhjDFBiLkkApAxIPiRyHotYvZbSmlFDTeO6c0tY/uQnGQFE40x\nJhgxmUSSuwd/++17m4+Qm5nCI3eOoHf37DBGZYwxsScmk0hL9bICgQDvbT5K/x65dMvL4IEbB5Ni\nBRONMSYkMddzJmRkkpiV1eRrJ06f5cn5H/LCm9tYseEQABlWMNEYY0IWcyORpI4dz1vmDwRYueEQ\nC1btAuDeSQO5emT4qvsaY0y8iLkkkph1/nWNZWsP8MqKnQy9MI9p1wmdc61gojHGtIWYSyJpvXsD\nUOvzU1JWRefcdMZfXEhOVgqXDbaCicYY05Y8SyIiMhB4CcgHTgLTVHVHo3USgd8D1wEB4Jeq+qfW\nHCepUx77jpYyc8k2qmv85womfnGIFUw0xpi25uUV5WeBGao6EJgBPNfEOvcC/YEBwBhguoj0ac1B\nVhYl85OX1lFSVs0dV/a1i+bGGBNGnoxERKQrMBKY5C6aCzwtIl1UtajBqncBz6uqHygSkdeBO4Ff\nB3GYRICtJ2u57ou9uPnyPqSnxtzZulZJsIrD51hb1LO2qGdt8ak2COkpa6962Z7AIVX1AaiqT0QO\nu8sbJpFewL4Gv+931wlGAcB/PhSeKXGjUX5+07c6xyNri3rWFvWsLT6lANjV2o1i6av6WuAK4Ajg\ni3AsxhgTLRJxEsjaUDb2KokcAHqISKI7CkkECt3lDe0HelP/ZhqPTFpSBaxui2CNMSbOtHoEUseT\nq86qehzYBEx1F00FNja6HgLwKvANEUkQkS7AZGCBFzEaY4xpPS9vXXoQeEhEPgEecn9HRBaLyKXu\nOrOA3cAO4H3gx6q6x8MYjTHGtEKHQCAQ6RiMMcZEKXuIwhhjTMgsiRhjjAmZJRFjjDEhsyRijDEm\nZFH3sKFXhRyjQZBt8UPgbpwHMGuAx1V1qdexhlswbdFgXQE2As+o6ve9i9IbwbaFiHwZ+CHQAedz\nMlFVj3kZa7gF+RnpCszEqY6RDKwEHlbVWo/DDRsR+Q1wB9AHGKaqm5tYJ6R+MxpHIp4UcowSwbTF\nB8AoVR0O3A/ME5FYnFAlmLao+6A8B7zuYWxe+8y2cG+rnw5MUtWhwDjgtJdBeiSYv4vHgW3uZ2Q4\ncAlwu3cheuJ1YDwtP7wdUr8ZVUmkQSHHue6iucBI98HEhs4VcnQfaKwr5Bgzgm0LVV2qqhXurx/h\nfOvM9yxQD7Ti7wLgX4FFwCceheepVrTFo8BvVPUogKqeVtVK7yINv1a0RQDIFpEEIBVIAQ55FqgH\nVHW1qjauENJYSP1mVCURmijkCNQVcmzo8xRyjBbBtkVD04BdqnrQg/i8FFRbiMgI4EvAk55H6J1g\n/y6GAH1F5B0R2SAi/y4isVbSNti2+AkwEKfu3lFgqaq+62Wg7URI/Wa0JRETIhG5EufDMvWz1o1F\nIpIM/BF4sK5TiXOJOKduJgFXAtcDX4loRJFzJ84ovQDoAYwXkSmRDSl6RFsSOVfIEc6d326pkGOd\nXk2sE+2CbQtEZAwwG5isqupplN4Ipi0KgH7AYhHZCzyCU6ftj96GGnat+YwsUNUqVS0F3gBGexpp\n+AXbFg8B/+OexjmN0xZXexpp+xBSvxlVScQKOdYLti1EZBQwD5iiqhu8jdIbwbSFqu5X1c6q2kdV\n+wBP4Zz//abnAYdRKz4jc4BrRaSDO0qbAHzoXaTh14q22INzRxIikgJMBM67eykOhNRvRlUScVkh\nx3rBtMUzQDrwnIhscv8Ni0y4YRVMW8SLYNriFeA4sBWno90CvBCBWMMtmLZ4BLhCRD7GaYtPgOcj\nEWy4iMjvReQgcAGwTES2uMs/d79pBRiNMcaELBpHIsYYY9oJSyLGGGNCZknEGGNMyCyJGGOMCZkl\nEWOMMSGzJGJigojMFpHpkY7js4jIV0VkSQuvX1V3+6Ux0cBu8TXtivs0eTec0vV1Bqrq4c/Ybjaw\nU1Wnhy24NiYiSTjl+S9U1b0RDudT2nNspn2JuvlETFy4WVWXRTqIWCYiSbE0X4aJHEsiJiq4Zbrn\n48x7kYbzZPG3VXVbE+t2BV4ELgf8wGZVHe++dgHwB3c/ZTjl0Gc0c8zZOHNsDMKpK7UOZ1KjA+7r\n43DKpwwAFHhIVde4rz2AM+FTPlCEMxnYKyLydeA+Vb0KeMc91BYRCQBfdY/3J1XtIyL/hjOB0N0N\nYpoBVKnq90SkI05F4utwRm5/Bqarqr+J9/JTN04/cBPOU9zqbj8IOItT9uIxVa1pKjZVfU1EbsEp\n5NkbpzTIg01NcGTih10TMdFkEU5H2B2nA5vVzHo/wCnf0MVd99/hXCJaBKzFqdY6CfiBiExo4Zj3\nAT8COuOUCJnl7qsz8CbwW5xE8Qec4o6dRCQH+C+cCZ+ygbE4VWIbG+/+f5GqZqnqa41enwvcJCKZ\n7jGTcCrOznFfn4XT+ffDmUjpRuCfWngvt7nb5uLUU6sFvuu+t7E4yehbzcXm1mF7Hvi6+57/DLzh\n1psyccpGIqY9el1E6k61rFLVye636xfrVnAvoheJSKaqljfavganY+2lqruo/1Y9BshR1Z+7v+8U\nkRdwpg9e3kwsC+vmlhCRx4FiESnA6XC3qGrdhEezRORhnI78rzgTHQ0VkQOqegRnropWUdXdIrIZ\nuBWn858EFKvqOhHpgVMosKOqVgEVIvIUzpwxzdXAWq2qC92fz+Ik0zq73YrGVwJPN7P9N3GmFK7b\n7s/uaGkUEI/zbxgsiZj2aXLjayJuGe9fAFNwvjnXnbLpDDROIr8EngCWi4gPeFZVf41zCqaXiJQ0\nWDcRWNVCLOdKYavqaRE5jVNOvJDzpxrdB/RQ1TMiMhV4DJgpIquB76lqKLMpzsGpPjsHuIf6UUhv\nnFn4jolI3boJwN5g3guAiAzCGUldAmTg9AdrWti+N3CviDzaYFkKzqjOxClLIiZaTANuAK7B6azr\nrjWcNxufqp7Bmf71Ubdi8UoR+QCnE92hqoNbcdxzM7uJSC7OqaDD7r8bG63bC3fudlVdAixx57P/\nBc7c3o3nqAjm1sj5wK/ckcetOB0+7nupAPKaugbSjMbHew6nWutdqlomIt/HuV7SXGwHgCdU9VdB\nHs/EAUsiJlpkA1XASZxvzT9rbkURuRnn+sVunAvVPpyRyz+AahF5DJiBc9prCJCiquub2d3N7qRe\nG4CfAn9X1SMisgh4SkTuAl4Dvgz0B950T3ddinOKrApnpHReR6+qPhE5CfSlmRGEqh51RzIvOr/q\nDnf5ARF5G/iNe2qvzN1Poaq+09S+mpDttk+5iAzGuR5yqIXYngfmi8gKnJsMMnES44omTimaOGEX\n1k20mEn9CGAL8F4L6wqwAqdjfRf4nar+3b2l9QacO632Aidwvo3ntLCv2TjJ4wTOdLLTANyJjW4B\n/gUnsT0K3KSqxTinyH6Acx3kJM5dYt9pZv//AcwRkRIRub2ZdebgXP+Y02j5fTgd+VagGOfuqu4t\nvJfGHsO5I6wUpx3mtRSbqr4PfBv4b/d4n7gxmDhmDxsa04xofIDRGK/ZSMQYY0zILIkYY4wJmZ3O\nMsYYEzIbiRhjjAmZJRFjjDEhsyRijDEmZJZEjDHGhMySiDHGmJBZEjHGGBOy/wcSV6Q2n6RAHgAA\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vfvVq6bqeoeG",
        "colab_type": "code",
        "outputId": "be0cac42-e2ac-415c-fcae-a12e53c45f53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        }
      },
      "source": [
        "ipredBal=[]\n",
        "patBal=[]\n",
        "\n",
        "for p in patient:\n",
        "  frame=testData[testData.patient==p]\n",
        "  change=False\n",
        "  start=(frame.iloc[0]['Unnamed: 0']).astype(int)-1\n",
        "  for i in range(5,frame.shape[0]-5):\n",
        "    ind=start+i\n",
        "    pt1=sum((predTestBal[(ind-5):(ind-1),1]>thresholdTestBal).astype(int))\n",
        "    pt2=sum((predTestBal[ind:(ind+4),1]>thresholdTestBal).astype(int))\n",
        "    if (pt1<2 and pt2>3 and change==False):\n",
        "      ipredBal.append(ind)\n",
        "      patBal.append(p)\n",
        "      change=True\n",
        "\n",
        "tChangeBal=[]\n",
        "\n",
        "for i in range(len(patBal)):\n",
        "  tShock=onsetTimes.loc[onsetTimes['patient']==patBal[i],'x'].iloc[0]\n",
        "  tPred=timeStamps.iloc[ipredBal[i]]['x']\n",
        "  dtShock=datetime.datetime.strptime(tShock,'%Y-%m-%d %H:%M:%S')\n",
        "  dtPred=datetime.datetime.strptime(tPred,'%Y-%m-%d %H:%M:%S')\n",
        "  \n",
        "  change=(dtShock-dtPred).total_seconds()/60./60.\n",
        "  tChangeBal.append(change)\n",
        "\n",
        "medBal=np.median(np.asarray(tChangeBal))\n",
        "print(medBal)\n",
        "\n",
        "plt.figure()\n",
        "n,bins,patches=plt.hist(tChangeBal,10,range=[0,50],color='r')\n",
        "plt.axvline(med,color='k',label='Median EWT')\n",
        "plt.title('Histogram of EWT values from balanced data')\n",
        "plt.xlabel('# hours prior to onset')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "20.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f2f815048d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEcCAYAAADtODJSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XmcFNW5//HPLI4bKArjAqgIyCNR\nooBxicao0as/lWD0uhCVGNyjSfxpEq9GozEuxCUucd+NojdGE1xy1UQTNRI1BiVGEx/JDSibMAyg\nDNsAPfePcxqbcWbonuqempn+vl+vec10dVed51TV9NPnnOpTFU1NTYiIiLRXZdoBiIhI16ZEIiIi\niSiRiIhIIkokIiKSiBKJiIgkokQiIiKJKJGkyMzeNbP90o4jTWb2NTObYWYNZjY87XiKwcxeNLNT\nOrjMVPejmTWZ2eB2rjvdzA4sdkztZWb7mdnMAl7f4ce7s6lOO4DuysymA6e4+/M5y06Ky/YBcPed\n8tjOAGAasJ67rypFrCm7Fjjb3Z9o6UkzawKWArlfeLoMeBCYDWzl7nPja38IXN7Csi/F9b8U118/\nPm6Mjx9y9zOKWakUtLkfpXNo6X2hO1AiKXNmVp1ygtoOeHcdr9nF3f/VfKGZ/QvYF/hVXLQv8F4L\ny15y9ytz1rsfmOnuFyULvVNpdT92gmMs3ZwSSYpyP52Y2e7ArcAQYBkwwd3PBV6OL19kZgAHAa8D\nFwKnAhsCzwLfdveP43bHAj8BegA3ACfnlHMpsDOwHPgqcK6ZvQ3cCAyNZT8OnOvujXF7TcBZwP8H\ntorbvJ/QKtg5ln9C9vXN6ljZUqyx/HqgCvibmX3k7oMK3IUvE5OGmVUBI4CLmy3bK+6LvJnZ+sBc\nYB93fycuqwU+JLxhryTUfQ/C/9Ak4Ax3/0x3SNzfg939hPh4ADktTDPbFPgZcCiQAe4DLnH31bGr\n6B5g11jmC+5+bAuxfmY/xnPrNuD48DLbGNghLtsVmAVc4O5Pxu3cT2j5bU9ouf0NOAr4L+AbcX+M\ncfe32th1h5rZOcAmsR7nu3vGzAYBdwG7EFqCzwFnufuiFvbX7qz7XDwTOA+oBSYQWmJN8flTgXOB\n/sAMwnn5ppn1BX5OODcagOvd/aa4zoZxv4wG5sTYW2VmB8VtbU04Dypynmu1rmb2ILAt8JSZrQYu\nc/erzexXcZ9vGPf7me6+rg9XnYrGSDqPG4Eb3X0TYBDwaFy+b/zdy917uPurwEnxZ39gICFh3Axg\nZp8jJKTjCSf6pkC/ZmWNBh4DehH+EVcTkkQfwhvvV4BvNVvnYGAksCfwA+BO4ARgG0IyGdNKvVqM\n1d1XuHuP+Jpd2pFE4NNEAjAc+CfwQrNl6wF/KWSj7r4C+DVr1+kYQstmHuH/5j5CUtmW8IZ3czvi\nh5CQVwGDY7z/AWT7238C/A7YjPDG+POWYm1jP44BDiMc5wrgqbi9LQjJfILFTyc5dbyIcB6sAF4F\n3oyPHyMkvLZ8DdiNkNBHA+Pi8grgKqAvIUFsA1zayjbyORcPB74AfD7GfDCAmR0dtzuWkMy+CtTH\nDzNPEd6k+8VtnmNmB8ftXUL4nxsUt/WN1ipoZn0I50Z2P/0vsHfOS1qtq7ufSPgwMir+L18d13mG\nkOS3IOzvCa2V31mpRVJaE80st0uhhnCitGQlMNjM+rj7fOC1NrZ7PPAzd/83gJldALxjZt8E/hN4\nyt1fic/9CPhOs/VfdfeJ8e9lwOSc56ab2R3Alwktj6yr3f0T4F0zewf4XU75zxDeBB8oJNYCulve\nNLNMzuNj3f054CXgXjPrRfhE9yd3n2pmtTnLXmuppZSHh4E7gB/Gx1+Pj3H3esInZWKdrgD+WGgB\nZrYloSXSy92XAUvM7HrgtFjWSkKy6htbO68UWMRN7j4jlvUlQhIf7+4Z4A9m9jQh2VwaX/8bd58c\nX/8b4Fvu/ov4+JfA2eso76fuvgBYYGY3xG3fHbsls12TdWb2M8Kb92dky49aOxfHx9bMIjP7I6GF\n9SwhAV/t7m/E1/0rxr4HUOvul8Xl/zazu4DjCC2GY2Jds7HfBPyolToeCrzr7o/Fbd9AaB1l48+7\nrjnr3Jv9O7ZgF5rZptkehq5AiaS0jmhpsL2V155MGER+z8ymAT9296dbeW1f4IOcxx8QjuWW8bkZ\n2SfcfamZ1Tdbf0buAzMbQvi0uRuwUdzW5GbrzM35e1kLj7dqR6yzWlmnuREtjZG4+3Qzm0VIGPsS\n3+iBP+cse7n5enn6I7BRfBOaS3iz+g2AmW0EXA8cQmgtAPQ0syp3X11AGdsRWkxzchoGlXx6fH5A\naJX8xcwWAtflvunkIfc49wVmxCSS9QFrt1bXdYx70Lbc8j6IZWYT5o2EY9KTUMeFLW0gz3Pxo5y/\nl+bEtQ2hhdDcdkBfM8vtSqsC/hT/Xut/hrXP1+aa/381mdmax4XUNb6+CrgCOJrQVZc9Pn2ALpNI\n1LXVSbj7VHcfQ2je/hR4LPZrtzQ982zCP0fWtoTukbmEPt7+2Sdi/2/vZus33+ZthEHqHWLX2oXk\n9Psm1FasxZDt3tqLkEAgvEHsC+xDOxNJTAiPEj5VjwGedvfF8enzAAP2iPsr25XW0j5bQnhDzMpN\nuDMIXUh93L1X/NkkezWfu3/k7qe6e1/gdODWAi+xzT3Os4FtYjdP1rbkn8zzsU2zbc+Of18ZYxkW\n99cJtH5+JTkXZxC6p1paPi1nH/dy957ufmh8fk4LsbdmrdeaWUWzdddV1+b/e18ndAMeSOiGHhCX\nF+v/r0OoRdJJmNkJwHPuXpfzySkD1MXfA4H34/JHgPNjl1Id4eT9ZRy8fQx4zcy+CPyV0G2xrpOy\nJ/AJ0GBmOxIGM+uKVLVWYy3S9l8mfGqfFbveIHQB/Q/hH/PVBNt+GJhIGMz+Yc7ynoRP6IvMbHPa\n7rqYQqj/toRPmBdkn3D3OWb2O+A6M7uYMAi8PdDf3V+Kff6vxm6thYQ3ocxnSsjP64RP7z8ws+sI\n/fqjCGMNxfJ9M3ud0EL4Lp+OqfQk1P1jM+sHfL+NbSQ5F+8GfmZmrxC6kAcRugf/Aiw2s/OBmwiX\nfQ8FNozdYI8CF8TYNyaMH7Xmt8DNZnYk8CThIpTcDwfrqutcwv9y7utXEM6xjQj/H12OWiSdxyGE\n8YcGQtP4OHdf5u5LCU3fSWa2yMz2BO4lXC3yMuEKoOXEkz9e7fFt4L8Jn54agHmEk7U13yN8MlpM\nuOLkl0WsV6uxFuBvFr5ol/3J7S9/idCKyx0/mEK4AmZy3H/t4u6vE1oUfQkDolk3xO1nx7KebWMb\nvyfsz7cJXTTNuyvHEsbO/kFIFo8RLpKA8Cb/ejwnngS+mx1rakddGgmJ4//FuG8Fxrr7e+3ZXiue\nINRxCuEN9564/MeEAfiP4/Jft7GNdp+L7v4rwv/Kw3H9icDmsXV5OKF7chqh/ncTPmhk4/sgPvc7\nwvnaWhnzCd1Q4wlv/jsQrtrLWlddrwIuiv/L3wN+EcueRTgH2hob7bQqdGOr7s3MegCLCF0F09KO\nR0S6H3VtdUNmNopwGWwF4RvPfwempxmTiHRf6trqnkYTBjpnE5rex2W/sCUiUmzq2hIRkUTUIhER\nkUS68xjJ+oSrXuYQpl0QEZF1qyJcOfgGbV/tuUZ3TiRf4NNvroqISGG+RJ7T8nTnRDIHYOHCJWQy\nhY8D9e7dg/r6hqIH1ZmVW53PP/9c1luvissvvybtUDpUuR3ncqsvJKtzZWUFm222McT30Hx050Sy\nGiCTaWpXIsmuW27Kqc7z5s2jpqa6rOqcVW51Lrf6QlHqnPeQgAbbRUQkESUSERFJpDt3bYlIB2tq\namLhwjoaG5fT8sTVHW/evEoymfbOddk1rbvOFdTUbMBmm9VSUZF8omElEhEpmoaGj6moqGDLLftT\nUdE5OjyqqytZtaq8Esm66tzUlGHRovk0NHxMz569kpeXeAt5MLNrCfd/HkCYpz97H+whhLvq9SbM\npDnW3aeu6zkR6ZyWLWtg88237DRJRFpWUVFJz56bsWDB3KIkko462hMJN/9pfuex24Fb3H0IcAuf\n3uFuXc+JSCeUyaymqkodHV1BVVU1mUxxvqvdIYnE3V/J3js6y8y2IMzb/0hc9AgwIt5vu9XnOiJe\nEWm/YvS5S+kV8zil+dFhG8Jd7VZDuLWpmc2OyyvaeK6gO/f17r2u20y3LNPYSG1tz3atm0SmsZHK\nmpoOLzcrjTqnpaYmnP7lVOesUtV53rxKqqs7T7fWEUccxsqVK3nyyWeoqqoC4Omnn+Tyyy/lvPN+\nwNFHH1fQ9i677BKGDh3K0Ucfx5133sb22w/koIMOLkqss2fP5uijRzNw4Kd3C950017cfPPtnHba\nOI4++tg1Zd100/U888zTPPPMCwCsXr2agw/en7PO+g6//vVjANTX19PUlKFPn/D5++STT2O//Q5Y\nq8zKysqinAvdvg1aX9/Qri/m1Nb2ZNLoo0oQUdv2fuJx6uoWr/uFJVBb2zO1stPQ2LiKmprqsqoz\nlPY4ZzKZTjew3adPH/7850nstdc+QEgkQ4bsSCbTVHCsTU1Na9YbN+50gKLVd/XqDD169OC++x5e\na/mqVRmGDx/J5Ml/Zf/9DwLgzTcns9VWfXn//akMHDiI9977JxtttDGjRh3JqFFHUl1dyR133May\nZcs4++xz1tpWrkwm85lzobKyouAP4GkmkhlAPzOrii2OKsItTWcQWiStPScikrfDDvsq//M/T7PX\nXvswa9ZMli9fzqBBg9c8v3LlSu6881amTJlMY+NKBg8ezHnnXcBGG21EXd08Lr/8Eurr57PVVltT\nWflpa+uKKy5lxx2HctRRx/LXv/6Fu+66jcbGFaxevZqxY8dx4IGh9XD22acxdOhOvPPO28yfP58D\nDjiQM88s7G7Tw4eP5PrrrwZg6dIlrFixnEMP/SpvvTWZgQMH8eabkxk+fGQR9lb7pJZI3H2emU0B\nxgAPxd9vuXsdQFvPiUjn99RTE5k48fGSbPuII45i1Kgj8nrtiBEjefzxR/nkk0949tnfcsghh5J7\nq/oJEx5g44035q67fgHArbfexIMP3sfpp5/FDTdcwy67DGfcuNOYNWsmJ530dfbYY6/PlDFkyI7c\neuvdVFVVsWBBPSeffCK7774Xm2yyCQBz537ELbfcxdKlSzn22NEcfvhottlm289sp6GhgZNO+vqa\nxzvttDPf//6FDBv2eebMmc2CBfW4/5Nhw3Zh112HM2HCLzjqqGOYMmUy++67f0H7sJg66vLfm4Aj\nga2A582s3t13As4AHjCzHwELgbE5q7X1nIhIXioqKjjggIN44YXf8fzzz3H77feulUgmTXqZJUuW\n8OKLfwBg5cpGBg/eAQhdSOec830A+vXrz267faHFMhYtWshVV13GzJkfUlVVzSeffMyHH37AzjsP\nA2D//b9CZWUlPXr0YLvttmfWrJktJpIePXpw//0Pf2b5+utvwNChO/HWW5Nxf4/hw0cyZMiOTJ3q\nrFq1irffnrImzjR0SCJx9+8A32lh+XvAHq2s0+pzItL5jRp1RN6thlI75JDDOP30k9hll+Fsuuna\n35toaoLzzvsvRo5sOUnk47rrxrP33vty5ZXXUFFRwXHHHUlj46e38qipWX/N35WVlaxeXfhltyNG\n7MZbb03m/fedY44ZQ1VVFf36bcPvf/8sPXr0pG/ffu2OP6nOc3mFiEiJ9OvXn1NP/RYnnXTKZ57b\nZ599+eUvJ7BixXIgjEFMnz4NgJEjd+O3v30SgNmzZ/HXv77R4vYXL17M1ltvTUVFBW+88RqzZhV/\nOHf48JG8/vqrLF26dM2VWLvuOpwHHrg31fERKIOrtkREAEaPPrLF5SeccBL33HMHp5wyNg6mVzBu\n3KkMGLA93/3u97j88kt4/vnn2Hrrvq2+YZ955tlcd91PueeeOxk69HMMGrRDu2JsPkYCrOnq2mmn\nYdTXz+fggw9d89yuu47gzjtvZezYb7arvGKpaGrqHBOrlcAAYJou/81fuV3+e/LJJ1JTU81tt92X\ndigdqpTH+aOPPmCrrbYrybbbS3Ntta6l45Vz+e/2wPR8ylPXloiIJKJEIiIiiSiRiIhIIkokIlJU\n3XjctVsp5nFSIhGRoqmurmHJkk+UTDq5pqYmliz5hOrq4kwQq8t/RaRoNtusloUL62hoWJR2KGtU\nVpbfrXbzqXN1dQ2bbVacO3MokYhI0VRVVdOnz9Zph7GWcrusHTq+zuraEhGRRJRIREQkESUSERFJ\nRIlEREQSUSIREZFElEhERCQRJRIREUlEiURERBJRIhERkUSUSEREJBElEhERSUSJREREElEiERGR\nRJRIREQkESUSERFJRIlEREQSUSIREZFElEhERCQRJRIREUlEiURERBJRIhERkUSUSEREJJHqtAMA\nMLPDgZ8AFfHnx+7+azMbAjwA9AbqgbHuPjW9SEVEpLnUWyRmVgE8CJzo7rsCJwIPmFklcDtwi7sP\nAW4B7kgvUhERaUnqiSTKAJvGv3sBc4A+wAjgkbj8EWCEmdV2fHgiItKa1BOJuzcBxwBPmNkHwERg\nLLANMMvdV8fXrQZmx+UiItJJpD5GYmbVwAXAaHefZGZ7A48SurgS6927RzE206Fqa3uWZdkdraYm\nnP7lVOescqtzudUXOrbOqScSYFegr7tPAojJZAmwHOhnZlXuvtrMqoC+wIxCNl5f30Am01RwUGme\neHV1i1Mpt7a2Z2plp6GxcRU1NdVlVWcov+NcbvWFZHWurKwo+AN46l1bwEygv5kZgJkNBbYEpgJT\ngDHxdWOAt9y9LpUoRUSkRaknEnf/CDgTeMzM/gb8NzDO3RcAZwDfNrP3gW/HxyIi0ol0hq4t3H0C\nMKGF5e8Be3R8RCIikq/UWyQiItK1KZGIiEgiSiQiIpKIEomIiCSiRCIiIokokYiISCJKJCIikogS\niYiIJKJEIiIiiSiRiIhIIkokIiKSiBKJiIgkokQiIiKJKJGIiEgiSiQiIpKIEomIiCSiRCIiIoko\nkYiISCJKJCIikogSiYiIJKJEIiIiiSiRiIhIIkokIiKSSN6JxMy+a2Z9ShmMiIh0PYW0SA4AppvZ\n02Z2rJmtX6qgRESk68g7kbj7aGA74BngHOAjM7vbzPYtVXAiItL5VRfyYnevB24BbjGzzwMPAt80\nsxnAXcCN7t5Q/DBFRKSzKniw3cy+Ymb3AS8Cc4GxwInAcEJrRUREykjeLRIzuxY4DvgY+AVwkbvP\nynn+NWBh0SMUEZFOrZCurQ2Ar7n7Gy096e4rzWy34oQlIiJdRSGJ5Cpgae4CM9sM2NDdZwO4+3tF\njK0sZRobqa3tmVrZIiKFKiSRTATGsXb3VX/gbmCPYgZVziprapg0+qhUyt77iceBFamULSJdVyGJ\nxNz977kL3P3vZrZj0iDMbAPgeuBAYDnwqrufZmZDgAeA3kA9MNbdpyYtT0REiqeQq7bmmdng3AXx\ncX0R4riakECGuPsw4OK4/HbgFncfQrjs+I4ilCUiIkVUSIvkXuBxM/sh8G9gEPATQtdWu5lZD8Il\nxP3dvQnA3eea2RbACOCg+NJHgJvNrNbd65KUKSIixVNIIhkPrASuBbYBZhCSyM8SxjCI0Kq5xMz2\nBxqAi4BlwCx3Xw3g7qvNbHYsW4lERKSTyDuRuHsGuCb+FFMVMBB4y92/b2Z7AE8BRxdj47179yjG\nZspGWleMpaGmJpz+5VTnrHKrc7nVFzq2zgVNkWJmBuwCrPXu7O73JojhQ2AVoesKd3/dzOYTWiT9\nzKwqtkaqgL6EllDe6usbyGSaCg6qHE88gLq6xWmH0GEaG1dRU1NdVnWGcG6XU53Lrb6QrM6VlRUF\nfwAvZBr5C4G/AecRpkTJ/pxQUInNuPt84I/EsZB4pdYWwPvAFGBMfOkYQqtF3VoiIp1IIS2Sc4Dd\n3f3tEsRxBnCvmV1HGIc50d0XmdkZwANm9iPC91fGlqBsERFJoJBEsgwoyTfX3f3fwH4tLH8PfdlR\nRKRTKySRXAz83MwuJcz6u0YciBcRkTJUSCK5P/4+JWdZBdBEuPJKRETKUCGJZPuSRSEiIl1WId8j\n+QDAzCqBLd19TsmiEhGRLqOQy397mdnDhDmx/hWXfdXMLi9VcCIi0vkVMmnj7YS7I24HZG9c8Spw\nbLGDEhGRrqOQRPIV4DuxSys7uWId4cuDIiJSpgpJJB8DfXIXmNm2gMZKRETKWCGJ5G7CNPL7A5Vm\nthfhplO3lyQyERHpEgq5/PenhG+33wKsR7g/yR3AjSWIS0REuohCLv9tIiQNJQ4REVkj70RiZge0\n9py7/6E44YiISFdTSNfWPc0e1wI1wEzCjalERKQMFdK1tdYUKfFGUxcB5XXHGBERWUshV22tJd5L\n/QrgB8ULR0REupp2J5LoIEBTyIuIlLFCBttnEL/RHm0EbAB8q9hBiYhI11HIYHvze7MvAd5390+K\nGI+IiHQxhQy2v1TKQEREpGsqpGvrQdbu2mqRu49NFJGIiHQphQy2LwKOINxWd2Zcd3Rc/r85PyIi\nUkYKGSMZAhzm7n/KLjCzfYCL3f3gokcmIiJdQiEtkj2B15otex3Yq3jhiIhIV1NIInkLuNLMNgSI\nv68AppQiMBER6RoKSSQnAXsDH5vZXMKNrvYBvlGCuEREpIso5PLf6cAXzWwboC8wx90/LFVgIiLS\nNRQ0RYqZ9Qb2A77s7h+aWV8z61+SyEREpEvIO5GY2ZcBB44HLo6LdwBuK0FcIiLSRRTSIrkBONbd\nDwFWxWWvA7sXPSoREekyCkkkA9z9hfh39hvujRT2XRQREelmCkkk/zCz5l88PBD4exHjERGRLqaQ\n1sR5wNNm9ltgQzO7AxhFmCZFRETKVN4tEnd/Dfg88C5wLzAN2N3d3yhRbCIi0gXk1SKJ92d/ATjY\n3a8uVTBmdglwKTDM3d8xsz2BO4ANgenACe4+r1Tli4hI4fJqkcT7s2+f7+vbw8xGEObz+iA+rgQe\nAs5y9yHAy8D4UpUvIiLtU8gYyY+B22KrYSY59yZx90T3bTez9YFbgDHAi3HxSGC5u78SH99OaJWM\nS1KWiIgUVyGJ5O74eyyfJpGK+HdVwjguAx5y9+lmll22LbF1AuDu882s0sw2d/cF+W64d+8eCUMr\nL7W1PdMOocPU1ITTv5zqnFVudS63+kLH1nmdicTMtnL3jwhdW0VnZnsBuwH/VYrt19c3kMms88aO\nn1GOJx5AXd3itEPoMI2Nq6ipqS6rOkM4t8upzuVWX0hW58rKioI/gOfTInkf2MTds2MXv3b3I9sR\nX2u+DAwFpsXWSH/gOeAmYLvsi8ysD5AppDUiIiKll8/geUWzx/sVMwB3H+/ufd19gLsPIIy/HAxc\nQ/i+yj7xpWcAvypm2SIiklw+iaTwfqEiiAP4JxIG+KcSWi4l6f4SEZH2y6drq9rM9ufTlknzx7j7\nH4oVUGyVZP/+MzCsWNsWEZHiyyeRzCN8kz2rvtnjJmBgMYMSEZGuY52JJLeFICIi0lzJvqkuIiLl\nQYlEREQSUSIREZFElEhERCQRJRIREUlE91uXNTKNjanMMbZq+QoWLm7s8HJFpDiUSGSNypoaJo0+\nqsPL3fuJx0GJRKTLUteWiIgkokQiIiKJKJGIiEgiSiQiIpKIEomIiCSiRCIiIokokYiISCJKJCIi\nkogSiYiIJKJEIiIiiSiRiIhIIkokIiKSiBKJiIgkokQiIiKJKJGIiEgiSiQiIpKIEomIiCSiRCIi\nIokokYiISCJKJCIikogSiYiIJKJEIiIiiSiRiIhIItVpB2BmvYEHgUFAIzAVON3d68xsT+AOYENg\nOnCCu89LK1bpfpoyGWpre3Z4uauWr2Dh4sYOL1ekFFJPJEATcLW7vwhgZtcA483sVOAh4CR3f8XM\nLgLGA+NSi1S6nYrKSiaNPqrDy937icdBiUS6idS7ttx9QTaJRK8B2wEjgeXu/kpcfjtwTAeHJyIi\n65B6IsllZpXAmcCTwLbAB9nn3H0+UGlmm6cUnoiItKAzdG3l+jnQANwMfK0YG+zdu0cxNiMllGls\nTGWcoqYm3dM/jTp3hrLTUG71hY6tc6dJJGZ2LbADMMrdM2b2IaGLK/t8HyDj7gsK2W59fQOZTFPB\n8ZTjiZeWypqaVMYpPn7vXTYdtnOHl5tVV7c4lXJra3umVnYayq2+kKzOlZUVBX8A7xRdW2Z2JWFM\n5Ah3XxEXTwY2NLN94uMzgF+lEZ+IiLQu9RaJme0EXAC8D/zZzACmufvXzOxE4A4z24B4+W9qgYqI\nSItSTyTu/i5Q0cpzfwaGdWxEIqWX1rhQtmyRYko9kYiUo7TGhSB+h4UV63ydSL46xRiJiIh0XUok\nIiKSiBKJiIgkokQiIiKJaLBdpMykdcWYZjzuvpRIRMpMWleMacbj7ktdWyIikogSiYiIJKKuLRHp\n1tKcRaBcxoWUSESkW0t9FoEySCTq2hIRkUSUSEREJBElEhERSUSJREREElEiERGRRJRIREQkESUS\nERFJRN8jEZEOkeYXA6W0lEhEpEOkOlmklJS6tkREJBElEhERSUSJREREElEiERGRRJRIREQkESUS\nERFJRIlEREQSUSIREZFElEhERCQRJRIREUlEU6SIiJRIWvOLZRo79j7xSiQiIiWS7vxiKzqsPHVt\niYhIIp2+RWJmQ4AHgN5APTDW3aemG5WIiGR1hRbJ7cAt7j4EuAW4I+V4REQkR6dukZjZFsAI4KC4\n6BHgZjOrdfe6daxeBVBZWdHu8tfforbd6yaRVrlplp1GuVsu7kfP2lrWX9XU4WWDjnM5lJtm2e19\n78tZryrfdSqamtL5J8qHmY0EfuHuO+Us+wdwgru/uY7V9wH+VMr4RES6sS8Br+Tzwk7dIknoDcKO\nmAOsTjkWEZGuogrYmvAempfOnkhmAP3MrMrdV5tZFdA3Ll+XFeSZTUVEZC3/W8iLO/Vgu7vPA6YA\nY+KiMcBbeYyPiIhIB+nUYyQAZrYj4fLfzYCFhMt/Pd2oREQkq9MnEhER6dw6ddeWiIh0fkokIiKS\niBKJiIgkokQiIiKJdPbvkXST1g2AAAAHmElEQVS4cpgk0syuBY4CBgDD3P2duLzb1t3MegMPAoOA\nRmAqcLq715nZnoQ53DYEphNmTpiXVqzFYmYTge2BDNAAfNvdp3Tn45xlZpcAlxLP7+56jAHMbDqw\nPP4AnO/uz3VkndUi+axymCRyIrAv8EGz5d257k3A1e5u7j6M8IWr8WZWCTwEnBXr/TIwPsU4i+kb\n7r6Luw8HrgXujcu783HGzEYAexLP725+jLP+0913jT/PdXSdlUhy5EwS+Uhc9AgwwszSm/GtBNz9\nFXdfa3aA7l53d1/g7i/mLHoN2A4YCSx39+wsCLcDx3RweCXh7h/nPNwUyHT342xm6xOS45k5i7vt\nMW5Dh9ZZiWRt2wCz3H01QPw9Oy7v7sqm7vHT2pnAk8C25LTM3H0+UGlmm6cUXlGZ2d1m9iFwBfAN\nuv9xvgx4yN2n5yzr1sc4mmBmb5vZrWbWiw6usxKJlKOfE8YMbk47kFJz91PcfVvgQuCatOMpJTPb\nC9gNuDXtWDrYl9x9F+ALQAUpnNdKJGtbM0kkQIGTRHZ1ZVH3eKHBDsCx7p4BPiR0cWWf7wNk3H1B\nSiGWhLs/COwPzKT7HucvA0OBaXEAuj/wHDCYbnyMs93U7r6CkET3poPPayWSHOU8SWQ51N3MriT0\nHR8R/+kAJgMbmtk+8fEZwK/SiK+YzKyHmW2T83gUsADotsfZ3ce7e193H+DuAwhJ82BCS6zbHWMA\nM9vYzDaNf1cAxxGOb4ee15prq5lymCTSzG4CjgS2AuYD9e6+U3euu5ntBLwDvA8si4unufvXzOyL\nhCuXNuDTyyTnphJokZjZlsATwMaE+/EsAL7n7m925+OcK7ZKDo+X/3a7YwxgZgOBxwn3EKkC/gF8\nx93ndGSdlUhERCQRdW2JiEgiSiQiIpKIEomIiCSiRCIiIokokYiISCJKJNJlmFmTmQ1OO46kzOx2\nM7s47ThEikXTyEuqzOwvwAnAKuAxdx+Rckgl5+5nFGtbZjYAmAas5+6rirXdUjKz+4GZ7n5R2rFI\ncahFIqkxs/UI0zhMJXzj/M10IwrMrGQfsLJTk7RzXX3wk05JJ6akaWfgH+7eZGa7kV8iOdDMngFq\ngQnA2XH9SsLEhKcSbuTzLOFGTh+b2X6EGWH7ZzcSv/V8irs/b2aXxliWA18FzjWztwnzFg0hfBN+\ngruf2zyY7Lbja88lTAb5Q3efEJ+/P66/HWEuqNFmdgI5n8jN7FTgfGBz4BXgDHefHZ9rAs4GziH8\nv27fLISX4+9FZgZwEPB6a/uipR2aR/lnAue1sM8HA/cAuwIrgRfc/di43o6EyTFHAnXAxe7+qJmd\nBhwPNJnZOcAf3X1US3FJ16EWiXQ4M/ummS0CJgF7xb/PA35qZovMrPmbZa7DCbOcfp5wf4WD4/KT\n4s/+wECgB4XNgjoaeAzoRXizvBG40d03IdxV8dE21t0K6AP0I0zVfqfFd/Xo64Rp3HsS3qjXMLMD\ngKtiXbYmTP393822fwSwB/C5FsreN/7u5e493P1VCtgXeZbf2j7/CfA7wlQr/QmJAzPbGPg98DCw\nBWH+p1vN7HPufidh/14d41US6QaUSKTDuft97t6LMLHcnoQ3qHeATdy9l7tPa2P18e6+yN0/BP5I\n+DQM4VPuz9z93+7eAFwAHFdAd9Cr7j7R3TPuvozwCXuwmfVx9wZ3f20d61/s7ivc/SXgt6x9E6En\n3H1S3PbyZusdD9zr7m/GiSQvICTXATmvuSremGsZ+SlkX+RTfmv7fCWhpdXX3XNvonQ4MD0e51Xu\n/hZhPqij84xfuhglEulQZrZ5bHV8DHwReBFwwICFsbujLR/l/L2U8GkbwlToubcO/oDQFbRlnqE1\nn0b9ZEK31ntm9oaZHd7GugvdfUmzsvu2se1ca8Ud3/jrCa2bfNZf5zZpe1/kU35r+/wHhPtf/MXM\n3jWzcXH5dsAe8Tgvii3O4wktN+mGNEYiHSreD6GXmR0H7O/up5vZbwj3EH8+waZnk3P/BcId4lYB\ncwlvlhtln4gD3s1vLbvW7KXuPhUYE8dejgQeM7PezRJG1mZmtnHOc9sSWlgtbrutuGO3UG9gVp7r\nt/RcW/uiPeW3yN0/IozDEKcrf97MXiYkvpfc/aACYpYuTIlE0pJ7ldZwQjdXEo8A58eB+DrgSuCX\n7r7KzN4HNjCzwwh9+hcC67e1sTgg/py718VP1ACZNlb5sZldSBjLOBy4pIC4HzGzh4F/xrhfb3ar\n2LbUxbgGEqbIz26zxX1RzPLN7GhCl+BMwnT0TTGWp4HxZnYin4637Ao0uPs/CQltYJ71ky5AXVuS\nlpHAm2bWG1jt7gsTbu9e4EHCVUzTCFdgfRsgXq30LeBuwiftJYSbHrXlEOBdM2sgDLwf18YYxUeE\nN9LZhIHkM9z9vXyCjq2wiwljCHMIA/vH5bNuXH8pYSB/UuxG2pM29kWRy/8C8HrcR08C343jMouB\n/4jbmU3YPz/l0+R9D/C5GO/EfOsqnZfuRyKSQEuXFouUG7VIREQkESUSERFJRF1bIiKSiFokIiKS\niBKJiIgkokQiIiKJKJGIiEgiSiQiIpKIEomIiCTyf5UMQUHKICriAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}
